
DA3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d3  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011e  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000122  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018b  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <usart_init>:
volatile char ReceivedChar;
volatile uint8_t ADCvalue; // Global variable, set to volatile if used withISR

void usart_init (void)
{
	UCSR0B = (1<<TXEN0)|(1<<RXEN0); // enable USART transmitter
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = ((1<<UCSZ01)|(1<<UCSZ00)|(0<<UMSEL00)); // character size is 8 bits, asynchronous usart
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0x0;
  9c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51; // for baud of 9600
  a0:	83 e3       	ldi	r24, 0x33	; 51
  a2:	80 93 c4 00 	sts	0x00C4, r24
  a6:	08 95       	ret

000000a8 <adc_init>:
}

void adc_init (void)
{
	ADMUX = 0; // use ADC0
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  b4:	80 81       	ld	r24, Z
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); // 64 prescale for 8Mhz
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
  c4:	80 81       	ld	r24, Z
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	80 83       	st	Z, r24
	ADCSRB = 0; // 0 for free running mode
  ca:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA |= (1 << ADEN); // Enable the ADC
  ce:	80 81       	ld	r24, Z
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable Interrupts
  d4:	80 81       	ld	r24, Z
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start the ADC conversion
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <timer_init>:
}

void timer_init (void)
{
	TCNT1H = 0xC2;
  e2:	82 ec       	ldi	r24, 0xC2	; 194
  e4:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 0xF6; // set count
  e8:	86 ef       	ldi	r24, 0xF6	; 246
  ea:	80 93 84 00 	sts	0x0084, r24
	TCCR1A = 0x00; // normal mode
  ee:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x04; // set pre scalar
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 0x01; // enable timer interrupt
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 6f 00 	sts	0x006F, r24
  fe:	08 95       	ret

00000100 <usart_send>:
}

void usart_send (unsigned char ch)
{
	while(! (UCSR0A & (1<<UDRE0))); // wait till the transmit buffer is ready to receive data
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <usart_send+0x4>
	UDR0 = ch; // send character to output buffer
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <__vector_21>:
}

ISR(ADC_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	ADCvalue = ADCH; // only need to read the high value for 8 bit
 11c:	80 91 79 00 	lds	r24, 0x0079
 120:	80 93 01 01 	sts	0x0101, r24
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	//while(!(UCSR0A & (1<<RXC0)));
	char c;
	c = ADCvalue; // get temp
 156:	d0 91 01 01 	lds	r29, 0x0101
	usart_send(c / 10 + '0'); // print 10s place
 15a:	cd ec       	ldi	r28, 0xCD	; 205
 15c:	dc 9f       	mul	r29, r28
 15e:	c1 2d       	mov	r28, r1
 160:	11 24       	eor	r1, r1
 162:	c6 95       	lsr	r28
 164:	c6 95       	lsr	r28
 166:	c6 95       	lsr	r28
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	8c 0f       	add	r24, r28
 16c:	0e 94 80 00 	call	0x100	; 0x100 <usart_send>
	usart_send(c % 10 + '0'); // print 1s place
 170:	cc 0f       	add	r28, r28
 172:	8c 2f       	mov	r24, r28
 174:	88 0f       	add	r24, r24
 176:	88 0f       	add	r24, r24
 178:	c8 0f       	add	r28, r24
 17a:	8d 2f       	mov	r24, r29
 17c:	8c 1b       	sub	r24, r28
 17e:	80 5d       	subi	r24, 0xD0	; 208
 180:	0e 94 80 00 	call	0x100	; 0x100 <usart_send>
	usart_send('F'); // print unit 
 184:	86 e4       	ldi	r24, 0x46	; 70
 186:	0e 94 80 00 	call	0x100	; 0x100 <usart_send>
	usart_send('\n'); // end line
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	0e 94 80 00 	call	0x100	; 0x100 <usart_send>
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:

int main(void)
{
	timer_init(); // initialize timer
 1b6:	0e 94 71 00 	call	0xe2	; 0xe2 <timer_init>
	usart_init(); // initialize usart
 1ba:	0e 94 48 00 	call	0x90	; 0x90 <usart_init>
	adc_init(); // initialize adc
 1be:	0e 94 54 00 	call	0xa8	; 0xa8 <adc_init>
	sei(); // enable global interrupts
 1c2:	78 94       	sei
	while(1) // loop forever
	{
	}
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0xe>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
