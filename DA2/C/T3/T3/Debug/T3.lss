
T3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a2  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000062  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c7  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000137  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  00000513  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000005ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
    DDRC |= 0x61; // PORTC configured to output mode
  80:	87 b1       	in	r24, 0x07	; 7
  82:	81 66       	ori	r24, 0x61	; 97
  84:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0xFF;
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00; // PORTC initialized to 0
  8c:	18 b8       	out	0x08, r1	; 8
	PORTB = 0x00; // PORTB intiialized to 0
  8e:	15 b8       	out	0x05, r1	; 5
	int i = 0;
	int j = 0; // helpers to keep track of every 5th and 10th pulse
	
    while (1) 
    {	
		TCNT1H = 0x85;
  90:	45 e8       	ldi	r20, 0x85	; 133
  92:	50 e0       	ldi	r21, 0x00	; 0
		TCNT1L = 0xEE; // set count
  94:	c4 e8       	ldi	r28, 0x84	; 132
  96:	d0 e0       	ldi	r29, 0x00	; 0
		TCCR1A = 0x00; // normal mode
  98:	e0 e8       	ldi	r30, 0x80	; 128
  9a:	f0 e0       	ldi	r31, 0x00	; 0
		TCCR1B = 0x03; // set prescalar
  9c:	0f 2e       	mov	r0, r31
  9e:	f1 e8       	ldi	r31, 0x81	; 129
  a0:	af 2e       	mov	r10, r31
  a2:	b1 2c       	mov	r11, r1
  a4:	f0 2d       	mov	r31, r0
		while((TIFR1 & 0x01) == 0); // wait for flag
		
		TCCR1A = 0x00;
		TIFR1 |= 1<<TOV1; // reset flag
		
		PORTC ^= 0x01; // toggle PC0
  a6:	31 e0       	ldi	r19, 0x01	; 1
	int i = 0;
	int j = 0; // helpers to keep track of every 5th and 10th pulse
	
    while (1) 
    {	
		TCNT1H = 0x85;
  a8:	25 e8       	ldi	r18, 0x85	; 133
		TCNT1L = 0xEE; // set count
  aa:	9e ee       	ldi	r25, 0xEE	; 238
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  ac:	75 e0       	ldi	r23, 0x05	; 5
  ae:	68 94       	set
  b0:	ee 24       	eor	r14, r14
  b2:	e1 f8       	bld	r14, 1
  b4:	f1 2c       	mov	r15, r1
    while (1) 
    {	
		TCNT1H = 0x85;
		TCNT1L = 0xEE; // set count
		TCCR1A = 0x00; // normal mode
		TCCR1B = 0x03; // set prescalar
  b6:	63 e0       	ldi	r22, 0x03	; 3
		if(PORTC & 0x01)
		{
			PORTB++; // increment count
			if(++i == 5)
			{
				PORTC ^= 0x20; // toggle on 5th
  b8:	68 94       	set
  ba:	dd 24       	eor	r13, r13
  bc:	d5 f8       	bld	r13, 5
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  be:	07 2f       	mov	r16, r23
  c0:	10 e0       	ldi	r17, 0x00	; 0
	int i = 0;
	int j = 0; // helpers to keep track of every 5th and 10th pulse
	
    while (1) 
    {	
		TCNT1H = 0x85;
  c2:	da 01       	movw	r26, r20
  c4:	2c 93       	st	X, r18
		TCNT1L = 0xEE; // set count
  c6:	98 83       	st	Y, r25
		TCCR1A = 0x00; // normal mode
  c8:	10 82       	st	Z, r1
		TCCR1B = 0x03; // set prescalar
  ca:	d5 01       	movw	r26, r10
  cc:	6c 93       	st	X, r22
		
		while((TIFR1 & 0x01) == 0); // wait for flag
  ce:	b0 9b       	sbis	0x16, 0	; 22
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x4e>
		
		TCCR1A = 0x00;
  d2:	10 82       	st	Z, r1
		TIFR1 |= 1<<TOV1; // reset flag
  d4:	b0 9a       	sbi	0x16, 0	; 22
		
		PORTC ^= 0x01; // toggle PC0
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	83 27       	eor	r24, r19
  da:	88 b9       	out	0x08, r24	; 8
		
		if(PORTC & 0x01)
  dc:	40 9b       	sbis	0x08, 0	; 8
  de:	f1 cf       	rjmp	.-30     	; 0xc2 <main+0x42>
		{
			PORTB++; // increment count
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	01 50       	subi	r16, 0x01	; 1
  e8:	11 09       	sbc	r17, r1
			if(++i == 5)
  ea:	59 f7       	brne	.-42     	; 0xc2 <main+0x42>
			{
				PORTC ^= 0x20; // toggle on 5th
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	8d 25       	eor	r24, r13
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	eb 1a       	sub	r14, r27
  f6:	f1 08       	sbc	r15, r1
				i = 0;
				
				if(++j == 2)
  f8:	11 f7       	brne	.-60     	; 0xbe <main+0x3e>
				{
					PORTC ^= 0x40; // toggle on 10th
  fa:	68 b1       	in	r22, 0x08	; 8
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	86 27       	eor	r24, r22
 100:	88 b9       	out	0x08, r24	; 8
 102:	d5 cf       	rjmp	.-86     	; 0xae <main+0x2e>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
