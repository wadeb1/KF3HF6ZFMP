
T4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000bd  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c5  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000143  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000005e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:

int i = 0;
int j = 0; // helpers to keep track of 5th and 10th pulses

ISR(TIMER1_OVF_vect)
{	
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	TIFR1 |= 1<<TOV1; // reset flag
  9e:	b0 9a       	sbi	0x16, 0	; 22
	
	PORTC ^= 0x01; // toggle PC0
  a0:	98 b1       	in	r25, 0x08	; 8
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	88 b9       	out	0x08, r24	; 8
		
	if(PORTC & 0x01)
  a8:	40 9b       	sbis	0x08, 0	; 8
  aa:	29 c0       	rjmp	.+82     	; 0xfe <__vector_13+0x6e>
	{
		PORTB++; // inc count
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	85 b9       	out	0x05, r24	; 5
		if(++i == 5)
  b2:	80 91 02 01 	lds	r24, 0x0102
  b6:	90 91 03 01 	lds	r25, 0x0103
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 03 01 	sts	0x0103, r25
  c0:	80 93 02 01 	sts	0x0102, r24
  c4:	05 97       	sbiw	r24, 0x05	; 5
  c6:	d9 f4       	brne	.+54     	; 0xfe <__vector_13+0x6e>
		{
			PORTC ^= 0x20; // toggle on 5th
  c8:	98 b1       	in	r25, 0x08	; 8
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	89 27       	eor	r24, r25
  ce:	88 b9       	out	0x08, r24	; 8
			i = 0;
  d0:	10 92 03 01 	sts	0x0103, r1
  d4:	10 92 02 01 	sts	0x0102, r1
				
			if(++j == 2)
  d8:	80 91 00 01 	lds	r24, 0x0100
  dc:	90 91 01 01 	lds	r25, 0x0101
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 01 01 	sts	0x0101, r25
  e6:	80 93 00 01 	sts	0x0100, r24
  ea:	02 97       	sbiw	r24, 0x02	; 2
  ec:	41 f4       	brne	.+16     	; 0xfe <__vector_13+0x6e>
			{
				PORTC ^= 0x40; // toggle on 10th
  ee:	98 b1       	in	r25, 0x08	; 8
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	89 27       	eor	r24, r25
  f4:	88 b9       	out	0x08, r24	; 8
				j = 0;
  f6:	10 92 01 01 	sts	0x0101, r1
  fa:	10 92 00 01 	sts	0x0100, r1
			}
		}
	}	
		
	TCNT1H = 0x85;
  fe:	85 e8       	ldi	r24, 0x85	; 133
 100:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 0xEE; // set count
 104:	8e ee       	ldi	r24, 0xEE	; 238
 106:	80 93 84 00 	sts	0x0084, r24
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:

int main(void)
{
    DDRC |= 0x61; // PORTC configured to output mode
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	81 66       	ori	r24, 0x61	; 97
 11c:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0xFF;
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00; // PORTC initialized to 0
 124:	18 b8       	out	0x08, r1	; 8
	PORTB = 0x00; // PORTB initialized to 0
 126:	15 b8       	out	0x05, r1	; 5
	
	TCNT1H = 0x85;
 128:	85 e8       	ldi	r24, 0x85	; 133
 12a:	80 93 85 00 	sts	0x0085, r24
	TCNT1L = 0xEE; // set count
 12e:	8e ee       	ldi	r24, 0xEE	; 238
 130:	80 93 84 00 	sts	0x0084, r24
	TCCR1A = 0x00; // normal mode
 134:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x03; // set pre scalar
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	80 93 81 00 	sts	0x0081, r24
	
	TIMSK1 = 0x01; // enable timer interrupt
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 6f 00 	sts	0x006F, r24
	sei(); // enable global interrupts
 144:	78 94       	sei
	
    while (1)  // wait for interrupts, loop forever
    {	
    }
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x2e>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
