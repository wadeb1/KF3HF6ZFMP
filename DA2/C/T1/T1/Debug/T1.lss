
T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000b0  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000137  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
    DDRC |= 0x01; // PORTC configured to output mode
  80:	38 9a       	sbi	0x07, 0	; 7
	PORTC = 0x00; // PORTC initialized to 0
  82:	18 b8       	out	0x08, r1	; 8
	
    while (1) 
    {
		TCNT1H = 0x85; 
  84:	65 e8       	ldi	r22, 0x85	; 133
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	45 e8       	ldi	r20, 0x85	; 133
		TCNT1L = 0xEE; // Set Count
  8a:	c4 e8       	ldi	r28, 0x84	; 132
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	3e ee       	ldi	r19, 0xEE	; 238
		TCCR1A = 0x00; // Normal Mode
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
		TCCR1B = 0x03; // Set Pre Scalar
  94:	01 e8       	ldi	r16, 0x81	; 129
  96:	10 e0       	ldi	r17, 0x00	; 0
  98:	23 e0       	ldi	r18, 0x03	; 3
		while((TIFR1 & 0x01) == 0); // Wait for flag
		
		TCCR1A = 0x00;
		TIFR1 |= 1<<TOV1; // Clear flag
		
		PORTC ^= 0x01; // toggle PC0
  9a:	91 e0       	ldi	r25, 0x01	; 1
    DDRC |= 0x01; // PORTC configured to output mode
	PORTC = 0x00; // PORTC initialized to 0
	
    while (1) 
    {
		TCNT1H = 0x85; 
  9c:	db 01       	movw	r26, r22
  9e:	4c 93       	st	X, r20
		TCNT1L = 0xEE; // Set Count
  a0:	38 83       	st	Y, r19
		TCCR1A = 0x00; // Normal Mode
  a2:	10 82       	st	Z, r1
		TCCR1B = 0x03; // Set Pre Scalar
  a4:	d8 01       	movw	r26, r16
  a6:	2c 93       	st	X, r18
		
		while((TIFR1 & 0x01) == 0); // Wait for flag
  a8:	b0 9b       	sbis	0x16, 0	; 22
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x28>
		
		TCCR1A = 0x00;
  ac:	10 82       	st	Z, r1
		TIFR1 |= 1<<TOV1; // Clear flag
  ae:	b0 9a       	sbi	0x16, 0	; 22
		
		PORTC ^= 0x01; // toggle PC0
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	89 27       	eor	r24, r25
  b4:	88 b9       	out	0x08, r24	; 8
    }
  b6:	f2 cf       	rjmp	.-28     	; 0x9c <main+0x1c>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
