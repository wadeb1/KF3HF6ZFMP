
T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000b3  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000137  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000049f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
    DDRC |= 0x01; // PORTC configured to output mode
  80:	38 9a       	sbi	0x07, 0	; 7
	DDRB |= 0xFF;
  82:	84 b1       	in	r24, 0x04	; 4
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
	PORTC = 0x00; // PORTC initialized to 0
  88:	18 b8       	out	0x08, r1	; 8
	PORTB = 0x00; // PORTB initialized to 0
  8a:	15 b8       	out	0x05, r1	; 5
	
    while (1) 
    {	
		TCNT1H = 0x85;
  8c:	65 e8       	ldi	r22, 0x85	; 133
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	45 e8       	ldi	r20, 0x85	; 133
		TCNT1L = 0xEE; // set count
  92:	c4 e8       	ldi	r28, 0x84	; 132
  94:	d0 e0       	ldi	r29, 0x00	; 0
  96:	3e ee       	ldi	r19, 0xEE	; 238
		TCCR1A = 0x00; // normal mode
  98:	e0 e8       	ldi	r30, 0x80	; 128
  9a:	f0 e0       	ldi	r31, 0x00	; 0
		TCCR1B = 0x03; // set pre scalar
  9c:	01 e8       	ldi	r16, 0x81	; 129
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	23 e0       	ldi	r18, 0x03	; 3
		while((TIFR1 & 0x01) == 0); // wait for flag
		
		TCCR1A = 0x00;
		TIFR1 |= 1<<TOV1; // reset flag
		
		PORTC ^= 0x01; // toggle PC0
  a2:	91 e0       	ldi	r25, 0x01	; 1
	PORTC = 0x00; // PORTC initialized to 0
	PORTB = 0x00; // PORTB initialized to 0
	
    while (1) 
    {	
		TCNT1H = 0x85;
  a4:	db 01       	movw	r26, r22
  a6:	4c 93       	st	X, r20
		TCNT1L = 0xEE; // set count
  a8:	38 83       	st	Y, r19
		TCCR1A = 0x00; // normal mode
  aa:	10 82       	st	Z, r1
		TCCR1B = 0x03; // set pre scalar
  ac:	d8 01       	movw	r26, r16
  ae:	2c 93       	st	X, r18
		
		while((TIFR1 & 0x01) == 0); // wait for flag
  b0:	b0 9b       	sbis	0x16, 0	; 22
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x30>
		
		TCCR1A = 0x00;
  b4:	10 82       	st	Z, r1
		TIFR1 |= 1<<TOV1; // reset flag
  b6:	b0 9a       	sbi	0x16, 0	; 22
		
		PORTC ^= 0x01; // toggle PC0
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	89 27       	eor	r24, r25
  bc:	88 b9       	out	0x08, r24	; 8
		
		if(PORTC & 0x01)
  be:	40 9b       	sbis	0x08, 0	; 8
  c0:	f1 cf       	rjmp	.-30     	; 0xa4 <main+0x24>
			PORTB++; // increment count
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	ed cf       	rjmp	.-38     	; 0xa4 <main+0x24>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
