
T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d3  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000144  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018f  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ac  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:

volatile uint8_t ADCvalue; // Global variable, set to volatile if used withIS

void adc_init (void)
{
	ADMUX = 0; // use ADC0
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 <<REFS1); // use AVcc as the reference
  96:	80 81       	ld	r24, Z
  98:	80 6c       	ori	r24, 0xC0	; 192
  9a:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); // 64 prescale for 8Mhz
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
  ac:	80 81       	ld	r24, Z
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	80 83       	st	Z, r24
	ADCSRB = 0; // 0 for free running mode
  b2:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA |= (1 << ADEN); // Enable the ADC
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable Interrupts
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start the ADC conversion
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_21>:
}

ISR(ADC_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	ADCvalue = ADCH; // only need to read the high value for 8 bit
  d6:	80 91 79 00 	lds	r24, 0x0079
  da:	80 93 00 01 	sts	0x0100, r24
}
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <delay>:
	TCCR0B = 0<<WGM02 |0<<CS02|0<<CS01|1<<CS00;   // PWM mode with 1 pre scalar
}

void delay(int j)
{
	for (int i = 0; i <j; i++)
  ea:	18 16       	cp	r1, r24
  ec:	19 06       	cpc	r1, r25
  ee:	5c f4       	brge	.+22     	; 0x106 <delay+0x1c>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	42 e0       	ldi	r20, 0x02	; 2
  f6:	4a 95       	dec	r20
  f8:	f1 f7       	brne	.-4      	; 0xf6 <delay+0xc>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <delay+0x12>
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	b9 f7       	brne	.-18     	; 0xf4 <delay+0xa>
 106:	08 95       	ret

00000108 <main>:
	}
}

int main()
{
	adc_init(); // initialize adc
 108:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	sei(); // enable global interrupts
 10c:	78 94       	sei
	
	DDRC = 0x00;
 10e:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF; // output ports
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
	while(1)
	{
		PORTB = 0X06;
 114:	0f 2e       	mov	r0, r31
 116:	f6 e0       	ldi	r31, 0x06	; 6
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
		delay(ADCvalue * 169 + 20000); // empirically derived delay
 11c:	c9 ea       	ldi	r28, 0xA9	; 169
		PORTB = 0x0C;
 11e:	0c e0       	ldi	r16, 0x0C	; 12
		delay(ADCvalue * 169 + 20000); // empirically derived delay
		PORTB = 0x09;
 120:	19 e0       	ldi	r17, 0x09	; 9
		delay(ADCvalue * 169 + 20000); // empirically derived delay
		PORTB = 0x03;
 122:	d3 e0       	ldi	r29, 0x03	; 3
	
	DDRC = 0x00;
	DDRB = 0xFF; // output ports
	while(1)
	{
		PORTB = 0X06;
 124:	f5 b8       	out	0x05, r15	; 5
		delay(ADCvalue * 169 + 20000); // empirically derived delay
 126:	80 91 00 01 	lds	r24, 0x0100
 12a:	c8 9f       	mul	r28, r24
 12c:	c0 01       	movw	r24, r0
 12e:	11 24       	eor	r1, r1
 130:	80 5e       	subi	r24, 0xE0	; 224
 132:	91 4b       	sbci	r25, 0xB1	; 177
 134:	0e 94 75 00 	call	0xea	; 0xea <delay>
		PORTB = 0x0C;
 138:	05 b9       	out	0x05, r16	; 5
		delay(ADCvalue * 169 + 20000); // empirically derived delay
 13a:	80 91 00 01 	lds	r24, 0x0100
 13e:	c8 9f       	mul	r28, r24
 140:	c0 01       	movw	r24, r0
 142:	11 24       	eor	r1, r1
 144:	80 5e       	subi	r24, 0xE0	; 224
 146:	91 4b       	sbci	r25, 0xB1	; 177
 148:	0e 94 75 00 	call	0xea	; 0xea <delay>
		PORTB = 0x09;
 14c:	15 b9       	out	0x05, r17	; 5
		delay(ADCvalue * 169 + 20000); // empirically derived delay
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	c8 9f       	mul	r28, r24
 154:	c0 01       	movw	r24, r0
 156:	11 24       	eor	r1, r1
 158:	80 5e       	subi	r24, 0xE0	; 224
 15a:	91 4b       	sbci	r25, 0xB1	; 177
 15c:	0e 94 75 00 	call	0xea	; 0xea <delay>
		PORTB = 0x03;
 160:	d5 b9       	out	0x05, r29	; 5
		delay(ADCvalue * 169 + 20000); // empirically derived delay
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	c8 9f       	mul	r28, r24
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	80 5e       	subi	r24, 0xE0	; 224
 16e:	91 4b       	sbci	r25, 0xB1	; 177
 170:	0e 94 75 00 	call	0xea	; 0xea <delay>
	}
 174:	d7 cf       	rjmp	.-82     	; 0x124 <main+0x1c>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
