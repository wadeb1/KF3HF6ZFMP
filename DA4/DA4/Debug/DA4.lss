
DA4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000013b  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cf  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000141  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000187  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  000006df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000072b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main ()
{
	unsigned int i, j, k;	// used to update duty cycles
	
	DDRD = 0xFF; 
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;			// output mode
  84:	84 b9       	out	0x04, r24	; 4
	
	OCR0A = 25; // 10% duty start
  86:	29 e1       	ldi	r18, 0x19	; 25
  88:	27 bd       	out	0x27, r18	; 39
	TCCR0A = 1<<COM0A1|1<<COM0A0|1<<WGM00; // PWM mode, set/reset on OCRxA
  8a:	91 ec       	ldi	r25, 0xC1	; 193
  8c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0<<WGM02 |0<<CS02|0<<CS01|1<<CS00;   // PWM mode with 1 pre scalar
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	85 bd       	out	0x25, r24	; 37
	
	OCR1A = 25; // 10% duty start
  92:	49 e1       	ldi	r20, 0x19	; 25
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	50 93 89 00 	sts	0x0089, r21
  9a:	40 93 88 00 	sts	0x0088, r20
	TCCR1A = 1<<COM1A1|1<<COM1A0|1<<WGM10|0<<WGM11; // PWM mode, set/reset on OCRxA
  9e:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = 0<<WGM13 |0<<CS02|0<<CS01|1<<CS00;   // PWM mode with 1 pre scalar
  a2:	80 93 81 00 	sts	0x0081, r24
		
	OCR2A = 25; // 10% duty start
  a6:	20 93 b3 00 	sts	0x00B3, r18
	TCCR2A = 1<<COM2A1|1<<COM2A0|1<<WGM20; // PWM mode, set/reset on OCRxA
  aa:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0<<WGM22 |0<<CS02|0<<CS01|1<<CS00;   // PWM mode with 1 pre scalar
  ae:	80 93 b1 00 	sts	0x00B1, r24
#define F_CPU 8000000UL //8 MHz
#include <avr/io.h>
#include <util/delay.h>

int main ()
{
  b2:	79 e1       	ldi	r23, 0x19	; 25
		{
			OCR0A = i; // update OCRxA to approach 100% duty cycle
			
			for(j = 25; j < 230; j+= 50)
			{
				OCR1A = j; // update OCRxA to approach 100% duty cycle
  b4:	a8 e8       	ldi	r26, 0x88	; 136
  b6:	b0 e0       	ldi	r27, 0x00	; 0
				
				for(k = 25; k < 230; k+= 50)
				{
					OCR2A = k; // update OCRxA to approach 100% duty cycle
  b8:	e3 eb       	ldi	r30, 0xB3	; 179
  ba:	f0 e0       	ldi	r31, 0x00	; 0
	{
		for(i = 25; i < 230; i+= 50)
		{
			OCR0A = i; // update OCRxA to approach 100% duty cycle
			
			for(j = 25; j < 230; j+= 50)
  bc:	69 e1       	ldi	r22, 0x19	; 25
  be:	50 e0       	ldi	r21, 0x00	; 0
			{
				OCR1A = j; // update OCRxA to approach 100% duty cycle
  c0:	97 2f       	mov	r25, r23
#define F_CPU 8000000UL //8 MHz
#include <avr/io.h>
#include <util/delay.h>

int main ()
{
  c2:	47 2f       	mov	r20, r23
	
	while (1)
	{
		for(i = 25; i < 230; i+= 50)
		{
			OCR0A = i; // update OCRxA to approach 100% duty cycle
  c4:	47 bd       	out	0x27, r20	; 39
			
			for(j = 25; j < 230; j+= 50)
  c6:	26 2f       	mov	r18, r22
  c8:	35 2f       	mov	r19, r21
			{
				OCR1A = j; // update OCRxA to approach 100% duty cycle
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	3c 93       	st	X, r19
  ce:	2e 93       	st	-X, r18
  d0:	89 2f       	mov	r24, r25
				
				for(k = 25; k < 230; k+= 50)
				{
					OCR2A = k; // update OCRxA to approach 100% duty cycle
  d2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	1f ef       	ldi	r17, 0xFF	; 255
  d6:	c4 e3       	ldi	r28, 0x34	; 52
  d8:	dc e0       	ldi	r29, 0x0C	; 12
  da:	11 50       	subi	r17, 0x01	; 1
  dc:	c0 40       	sbci	r28, 0x00	; 0
  de:	d0 40       	sbci	r29, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x64>
  e4:	00 00       	nop
  e6:	8e 5c       	subi	r24, 0xCE	; 206
			
			for(j = 25; j < 230; j+= 50)
			{
				OCR1A = j; // update OCRxA to approach 100% duty cycle
				
				for(k = 25; k < 230; k+= 50)
  e8:	83 31       	cpi	r24, 0x13	; 19
  ea:	99 f7       	brne	.-26     	; 0xd2 <main+0x52>
	{
		for(i = 25; i < 230; i+= 50)
		{
			OCR0A = i; // update OCRxA to approach 100% duty cycle
			
			for(j = 25; j < 230; j+= 50)
  ec:	2e 5c       	subi	r18, 0xCE	; 206
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
  f0:	23 31       	cpi	r18, 0x13	; 19
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	31 07       	cpc	r19, r17
  f6:	49 f7       	brne	.-46     	; 0xca <main+0x4a>
  f8:	4e 5c       	subi	r20, 0xCE	; 206
	TCCR2A = 1<<COM2A1|1<<COM2A0|1<<WGM20; // PWM mode, set/reset on OCRxA
	TCCR2B = 0<<WGM22 |0<<CS02|0<<CS01|1<<CS00;   // PWM mode with 1 pre scalar
	
	while (1)
	{
		for(i = 25; i < 230; i+= 50)
  fa:	43 31       	cpi	r20, 0x13	; 19
  fc:	19 f7       	brne	.-58     	; 0xc4 <main+0x44>
  fe:	e1 cf       	rjmp	.-62     	; 0xc2 <main+0x42>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
