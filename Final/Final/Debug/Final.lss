
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000011fa  0000128e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080016a  0080016a  000012f8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b50  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000347  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  000022d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a7  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089d  00000000  00000000  00002bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ef       	ldi	r30, 0xFA	; 250
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 36       	cpi	r26, 0x6A	; 106
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e6       	ldi	r26, 0x6A	; 106
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 39       	cpi	r26, 0x9D	; 157
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
      9e:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
      a6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
      aa:	8c e0       	ldi	r24, 0x0C	; 12
      ac:	80 93 b8 00 	sts	0x00B8, r24
      b0:	08 95       	ret

000000b2 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      b2:	94 ea       	ldi	r25, 0xA4	; 164
      b4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
      b8:	4f ef       	ldi	r20, 0xFF	; 255
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
      c0:	ec eb       	ldi	r30, 0xBC	; 188
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	90 81       	ld	r25, Z
      c6:	99 23       	and	r25, r25
      c8:	34 f0       	brlt	.+12     	; 0xd6 <i2c_start+0x24>
      ca:	41 50       	subi	r20, 0x01	; 1
      cc:	51 09       	sbc	r21, r1
      ce:	61 09       	sbc	r22, r1
      d0:	71 09       	sbc	r23, r1
      d2:	c0 f7       	brcc	.-16     	; 0xc4 <i2c_start+0x12>
      d4:	04 c0       	rjmp	.+8      	; 0xde <i2c_start+0x2c>
	if(i2c_timer == 0)
      d6:	45 2b       	or	r20, r21
      d8:	46 2b       	or	r20, r22
      da:	47 2b       	or	r20, r23
      dc:	41 f1       	breq	.+80     	; 0x12e <i2c_start+0x7c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
      de:	90 91 b9 00 	lds	r25, 0x00B9
      e2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
      e4:	98 30       	cpi	r25, 0x08	; 8
      e6:	11 f0       	breq	.+4      	; 0xec <i2c_start+0x3a>
      e8:	90 31       	cpi	r25, 0x10	; 16
      ea:	19 f5       	brne	.+70     	; 0x132 <i2c_start+0x80>

	// send device address
	TWDR = address;
      ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
      f0:	84 e8       	ldi	r24, 0x84	; 132
      f2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
      fe:	ec eb       	ldi	r30, 0xBC	; 188
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	20 81       	ld	r18, Z
     104:	22 23       	and	r18, r18
     106:	2c f0       	brlt	.+10     	; 0x112 <i2c_start+0x60>
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	a1 09       	sbc	r26, r1
     10c:	b1 09       	sbc	r27, r1
     10e:	c8 f7       	brcc	.-14     	; 0x102 <i2c_start+0x50>
     110:	04 c0       	rjmp	.+8      	; 0x11a <i2c_start+0x68>
	if(i2c_timer == 0)
     112:	89 2b       	or	r24, r25
     114:	8a 2b       	or	r24, r26
     116:	8b 2b       	or	r24, r27
     118:	71 f0       	breq	.+28     	; 0x136 <i2c_start+0x84>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     11a:	90 91 b9 00 	lds	r25, 0x00B9
     11e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     120:	98 31       	cpi	r25, 0x18	; 24
     122:	59 f0       	breq	.+22     	; 0x13a <i2c_start+0x88>
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 34       	cpi	r25, 0x40	; 64
     128:	49 f4       	brne	.+18     	; 0x13c <i2c_start+0x8a>
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     13a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     13c:	08 95       	ret

0000013e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     144:	ec eb       	ldi	r30, 0xBC	; 188
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	64 ea       	ldi	r22, 0xA4	; 164
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     14e:	a9 eb       	ldi	r26, 0xB9	; 185
     150:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     152:	cb eb       	ldi	r28, 0xBB	; 187
     154:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     156:	74 e8       	ldi	r23, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     158:	14 e9       	ldi	r17, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     15a:	60 83       	st	Z, r22
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     15c:	25 2f       	mov	r18, r21
     15e:	34 2f       	mov	r19, r20
     160:	90 81       	ld	r25, Z
     162:	99 23       	and	r25, r25
     164:	34 f0       	brlt	.+12     	; 0x172 <i2c_start_wait+0x34>
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	21 15       	cp	r18, r1
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	39 07       	cpc	r19, r25
     170:	b9 f7       	brne	.-18     	; 0x160 <i2c_start_wait+0x22>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     172:	9c 91       	ld	r25, X
     174:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     176:	98 30       	cpi	r25, 0x08	; 8
     178:	11 f0       	breq	.+4      	; 0x17e <i2c_start_wait+0x40>
     17a:	90 31       	cpi	r25, 0x10	; 16
     17c:	71 f7       	brne	.-36     	; 0x15a <i2c_start_wait+0x1c>
    
    	// send device address
    	TWDR = address;
     17e:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     180:	70 83       	st	Z, r23
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     182:	25 2f       	mov	r18, r21
     184:	34 2f       	mov	r19, r20
     186:	90 81       	ld	r25, Z
     188:	99 23       	and	r25, r25
     18a:	34 f0       	brlt	.+12     	; 0x198 <i2c_start_wait+0x5a>
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	3f 4f       	sbci	r19, 0xFF	; 255
     190:	21 15       	cp	r18, r1
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	39 07       	cpc	r19, r25
     196:	b9 f7       	brne	.-18     	; 0x186 <i2c_start_wait+0x48>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     198:	9c 91       	ld	r25, X
     19a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     19c:	90 32       	cpi	r25, 0x20	; 32
     19e:	11 f0       	breq	.+4      	; 0x1a4 <i2c_start_wait+0x66>
     1a0:	98 35       	cpi	r25, 0x58	; 88
     1a2:	69 f4       	brne	.+26     	; 0x1be <i2c_start_wait+0x80>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1a4:	10 83       	st	Z, r17
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1a6:	25 2f       	mov	r18, r21
     1a8:	34 2f       	mov	r19, r20
     1aa:	90 81       	ld	r25, Z
     1ac:	94 ff       	sbrs	r25, 4
     1ae:	d5 cf       	rjmp	.-86     	; 0x15a <i2c_start_wait+0x1c>
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	21 15       	cp	r18, r1
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	39 07       	cpc	r19, r25
     1ba:	b9 f7       	brne	.-18     	; 0x1aa <i2c_start_wait+0x6c>
     1bc:	ce cf       	rjmp	.-100    	; 0x15a <i2c_start_wait+0x1c>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	08 95       	ret

000001c6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1c6:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>

}/* i2c_rep_start */
     1ca:	08 95       	ret

000001cc <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1cc:	84 e9       	ldi	r24, 0x94	; 148
     1ce:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	ec eb       	ldi	r30, 0xBC	; 188
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	20 81       	ld	r18, Z
     1dc:	24 ff       	sbrs	r18, 4
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <i2c_stop+0x1e>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	81 15       	cp	r24, r1
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	92 07       	cpc	r25, r18
     1e8:	c1 f7       	brne	.-16     	; 0x1da <i2c_stop+0xe>
     1ea:	08 95       	ret

000001ec <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1f0:	84 e8       	ldi	r24, 0x84	; 132
     1f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     1fe:	ec eb       	ldi	r30, 0xBC	; 188
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	20 81       	ld	r18, Z
     204:	22 23       	and	r18, r18
     206:	2c f0       	brlt	.+10     	; 0x212 <i2c_write+0x26>
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	a1 09       	sbc	r26, r1
     20c:	b1 09       	sbc	r27, r1
     20e:	c8 f7       	brcc	.-14     	; 0x202 <i2c_write+0x16>
     210:	04 c0       	rjmp	.+8      	; 0x21a <i2c_write+0x2e>
	if(i2c_timer == 0)
     212:	89 2b       	or	r24, r25
     214:	8a 2b       	or	r24, r26
     216:	8b 2b       	or	r24, r27
     218:	41 f0       	breq	.+16     	; 0x22a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     21a:	90 91 b9 00 	lds	r25, 0x00B9
     21e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	98 32       	cpi	r25, 0x28	; 40
     224:	19 f4       	brne	.+6      	; 0x22c <i2c_write+0x40>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     22c:	08 95       	ret

0000022e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     22e:	84 ec       	ldi	r24, 0xC4	; 196
     230:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	20 81       	ld	r18, Z
     242:	22 23       	and	r18, r18
     244:	2c f0       	brlt	.+10     	; 0x250 <i2c_readAck+0x22>
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	a1 09       	sbc	r26, r1
     24a:	b1 09       	sbc	r27, r1
     24c:	c8 f7       	brcc	.-14     	; 0x240 <i2c_readAck+0x12>
     24e:	04 c0       	rjmp	.+8      	; 0x258 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     250:	89 2b       	or	r24, r25
     252:	8a 2b       	or	r24, r26
     254:	8b 2b       	or	r24, r27
     256:	19 f0       	breq	.+6      	; 0x25e <i2c_readAck+0x30>
		return 0;

    return TWDR;
     258:	80 91 bb 00 	lds	r24, 0x00BB
     25c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     25e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     260:	08 95       	ret

00000262 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     270:	ec eb       	ldi	r30, 0xBC	; 188
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	20 81       	ld	r18, Z
     276:	22 23       	and	r18, r18
     278:	2c f0       	brlt	.+10     	; 0x284 <i2c_readNak+0x22>
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a1 09       	sbc	r26, r1
     27e:	b1 09       	sbc	r27, r1
     280:	c8 f7       	brcc	.-14     	; 0x274 <i2c_readNak+0x12>
     282:	04 c0       	rjmp	.+8      	; 0x28c <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     284:	89 2b       	or	r24, r25
     286:	8a 2b       	or	r24, r26
     288:	8b 2b       	or	r24, r27
     28a:	19 f0       	breq	.+6      	; 0x292 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     28c:	80 91 bb 00 	lds	r24, 0x00BB
     290:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     292:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     294:	08 95       	ret

00000296 <usart_init>:


void usart_init (void)
{
	//synchronous usart, transmit 8-bit data
	UCSR0C = ((1<<UCSZ01)|(1<<UCSZ00)|(1<<UMSEL00));
     296:	86 e4       	ldi	r24, 0x46	; 70
     298:	80 93 c2 00 	sts	0x00C2, r24
	//9600 Baud Rate from 8MHz clock
	UBRR0H = 0;
     29c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 33;
     2a0:	81 e2       	ldi	r24, 0x21	; 33
     2a2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<TXEN0);	//enable transmitter
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	80 93 c1 00 	sts	0x00C1, r24
     2ac:	08 95       	ret

000002ae <USART_tx_string>:
}
void USART_tx_string (char *data)
{
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
	while((*data!='\0')){
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 81       	ld	r18, Z
     2b6:	22 23       	and	r18, r18
     2b8:	69 f0       	breq	.+26     	; 0x2d4 <USART_tx_string+0x26>
     2ba:	dc 01       	movw	r26, r24
     2bc:	11 96       	adiw	r26, 0x01	; 1
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
     2be:	e0 ec       	ldi	r30, 0xC0	; 192
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
     2c2:	c6 ec       	ldi	r28, 0xC6	; 198
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
	UCSR0B = (1<<TXEN0);	//enable transmitter
}
void USART_tx_string (char *data)
{
	while((*data!='\0')){
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
     2c6:	90 81       	ld	r25, Z
     2c8:	95 ff       	sbrs	r25, 5
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <USART_tx_string+0x18>
		UDR0 = *data;
     2cc:	28 83       	st	Y, r18
	UBRR0L = 33;
	UCSR0B = (1<<TXEN0);	//enable transmitter
}
void USART_tx_string (char *data)
{
	while((*data!='\0')){
     2ce:	2d 91       	ld	r18, X+
     2d0:	21 11       	cpse	r18, r1
     2d2:	f9 cf       	rjmp	.-14     	; 0x2c6 <USART_tx_string+0x18>
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
		UDR0 = *data;
		data++;
	}
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <MPU6050_writereg>:


void MPU6050_writereg(uint8_t accel, uint8_t reg, uint8_t val)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	d6 2f       	mov	r29, r22
     2e0:	c4 2f       	mov	r28, r20
	i2c_start(accel+I2C_WRITE);
     2e2:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write(reg);  // go to register e.g. 106 user control
     2e6:	8d 2f       	mov	r24, r29
     2e8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(val);  // set value e.g. to 0100 0000 FIFO enable
     2ec:	8c 2f       	mov	r24, r28
     2ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();        // set stop condition = release bus
     2f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <MPU6050_signed_readreg>:
	i2c_stop();
	return raw;
}

int16_t MPU6050_signed_readreg(uint8_t accel, uint8_t reg)//read signed 16 bits
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	c8 2f       	mov	r28, r24
     302:	d6 2f       	mov	r29, r22
	i2c_start_wait(accel+I2C_WRITE); // set device address and write mode
     304:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start_wait>
	i2c_write(reg);                                  // ACCEL_OUT
     308:	8d 2f       	mov	r24, r29
     30a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_rep_start(accel+I2C_READ);    // set device address and read mode
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	8c 0f       	add	r24, r28
     312:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <i2c_rep_start>
	char raw1 = i2c_readAck();                    // read one intermediate byte
     316:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_readAck>
     31a:	c8 2f       	mov	r28, r24
	int16_t raw2 = (raw1<<8) | i2c_readNak();        // read last byte
     31c:	0e 94 31 01 	call	0x262	; 0x262 <i2c_readNak>
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	dc 2f       	mov	r29, r28
     324:	cc 27       	eor	r28, r28
     326:	c8 2b       	or	r28, r24
	i2c_stop();
     328:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
	return raw2;
}
     32c:	ce 01       	movw	r24, r28
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <Init_MPU6050>:



void Init_MPU6050(uint8_t accel)
{
     334:	cf 93       	push	r28
     336:	c8 2f       	mov	r28, r24

	ret = i2c_start(accel+I2C_WRITE);       // set device address and write mode
     338:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
     33c:	80 93 9c 01 	sts	0x019C, r24
	if ( ret )
     340:	88 23       	and	r24, r24
     342:	81 f0       	breq	.+32     	; 0x364 <Init_MPU6050+0x30>
	{

		snprintf(outs,sizeof(outs),"failed to issue start condition \n\r");
     344:	83 e2       	ldi	r24, 0x23	; 35
     346:	e0 e0       	ldi	r30, 0x00	; 0
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	aa e6       	ldi	r26, 0x6A	; 106
     34c:	b1 e0       	ldi	r27, 0x01	; 1
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <Init_MPU6050+0x1a>
		USART_tx_string(outs);
     356:	8a e6       	ldi	r24, 0x6A	; 106
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART_tx_string>
		i2c_stop();
     35e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
     362:	30 c0       	rjmp	.+96     	; 0x3c4 <Init_MPU6050+0x90>
	}
	else
	{
		/* issuing start condition ok, device accessible */
		MPU6050_writereg(accel, 0x6B, 0x00); // reg 107 set value to 0000 0000 and wake up sensor
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	6b e6       	ldi	r22, 0x6B	; 107
     368:	8c 2f       	mov	r24, r28
     36a:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x19, 0x07); // reg 25 sample rate divider set value to 0000 1000 for 1000 Hz
     36e:	47 e0       	ldi	r20, 0x07	; 7
     370:	69 e1       	ldi	r22, 0x19	; 25
     372:	8c 2f       	mov	r24, r28
     374:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x1C, 0x18); // reg 28 acceleration configuration set value to 0001 1000 for 16g
     378:	48 e1       	ldi	r20, 0x18	; 24
     37a:	6c e1       	ldi	r22, 0x1C	; 28
     37c:	8c 2f       	mov	r24, r28
     37e:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x23, 0xF8); // reg 35 FIFO enable set value to 1111 1000 for all sensors not slave
     382:	48 ef       	ldi	r20, 0xF8	; 248
     384:	63 e2       	ldi	r22, 0x23	; 35
     386:	8c 2f       	mov	r24, r28
     388:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x37, 0x10); // reg 55 interrupt configuration set value to 0001 0000 for logic level high and read clear
     38c:	40 e1       	ldi	r20, 0x10	; 16
     38e:	67 e3       	ldi	r22, 0x37	; 55
     390:	8c 2f       	mov	r24, r28
     392:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x38, 0x01); // reg 56 interrupt enable set value to 0000 0001 data ready creates interrupt
     396:	41 e0       	ldi	r20, 0x01	; 1
     398:	68 e3       	ldi	r22, 0x38	; 56
     39a:	8c 2f       	mov	r24, r28
     39c:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x6A, 0x40); // reg 106 user control set value to 0100 0000 FIFO enable
     3a0:	40 e4       	ldi	r20, 0x40	; 64
     3a2:	6a e6       	ldi	r22, 0x6A	; 106
     3a4:	8c 2f       	mov	r24, r28
     3a6:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		snprintf(outs,sizeof(outs),"done start \n\r");
     3aa:	8e e0       	ldi	r24, 0x0E	; 14
     3ac:	e3 e2       	ldi	r30, 0x23	; 35
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	aa e6       	ldi	r26, 0x6A	; 106
     3b2:	b1 e0       	ldi	r27, 0x01	; 1
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	8a 95       	dec	r24
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <Init_MPU6050+0x80>
		USART_tx_string(outs);
     3bc:	8a e6       	ldi	r24, 0x6A	; 106
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART_tx_string>
	}
	i2c_stop();
     3c4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
}
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <main>:



int main(){
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	60 97       	sbiw	r28, 0x10	; 16
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
	int16_t zi1 = 0;
	float xa1, ya1, za1;
	
	int x0,x1,x2,y0,y1,y2,z0,z1,z2;

	DDRD = 0xF0;
     3e0:	80 ef       	ldi	r24, 0xF0	; 240
     3e2:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00;
     3e4:	17 b8       	out	0x07, r1	; 7
	//declare average calibrated accelerometer values
	//initialize calibarition values
	//declare accelerometer value strings

	usart_init();//initialize usart
     3e6:	0e 94 4b 01 	call	0x296	; 0x296 <usart_init>
	i2c_init();     // init I2C interface
     3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	81 ee       	ldi	r24, 0xE1	; 225
     3f2:	94 e0       	ldi	r25, 0x04	; 4
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	80 40       	sbci	r24, 0x00	; 0
     3f8:	90 40       	sbci	r25, 0x00	; 0
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x28>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x32>
     3fe:	00 00       	nop
	_delay_ms(200);  // Wait for 200 ms.
	Init_MPU6050(MPU60501);    // sensor init
     400:	80 ed       	ldi	r24, 0xD0	; 208
     402:	0e 94 9a 01 	call	0x334	; 0x334 <Init_MPU6050>
     406:	af ef       	ldi	r26, 0xFF	; 255
     408:	b1 ee       	ldi	r27, 0xE1	; 225
     40a:	e4 e0       	ldi	r30, 0x04	; 4
     40c:	a1 50       	subi	r26, 0x01	; 1
     40e:	b0 40       	sbci	r27, 0x00	; 0
     410:	e0 40       	sbci	r30, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <main+0x40>
     414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x4a>
     416:	00 00       	nop
	_delay_ms(200);     // Wait for 200 ms.
	snprintf(outs,sizeof(outs),"6050 initialized \n\r");
     418:	84 e1       	ldi	r24, 0x14	; 20
     41a:	e1 e3       	ldi	r30, 0x31	; 49
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	aa e6       	ldi	r26, 0x6A	; 106
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	8a 95       	dec	r24
     428:	e1 f7       	brne	.-8      	; 0x422 <main+0x56>
	USART_tx_string(outs);
     42a:	8a e6       	ldi	r24, 0x6A	; 106
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART_tx_string>
     432:	0f 2e       	mov	r0, r31
     434:	fa e0       	ldi	r31, 0x0A	; 10
     436:	cf 2e       	mov	r12, r31
     438:	d1 2c       	mov	r13, r1
     43a:	f0 2d       	mov	r31, r0


int main(){
	int16_t xi1 = 0;
	int16_t yi1 = 0;
	int16_t zi1 = 0;
     43c:	81 2c       	mov	r8, r1
     43e:	91 2c       	mov	r9, r1



int main(){
	int16_t xi1 = 0;
	int16_t yi1 = 0;
     440:	00 e0       	ldi	r16, 0x00	; 0
     442:	10 e0       	ldi	r17, 0x00	; 0
}



int main(){
	int16_t xi1 = 0;
     444:	e1 2c       	mov	r14, r1
     446:	f1 2c       	mov	r15, r1
	snprintf(outs,sizeof(outs),"6050 initialized \n\r");
	USART_tx_string(outs);
	for(int i = 0; i<10; i++)//get values for initial calibration
	{
			// read raw X acceleration from fifo
			xi1 += MPU6050_signed_readreg(MPU60501,0x3B);   
     448:	6b e3       	ldi	r22, 0x3B	; 59
     44a:	80 ed       	ldi	r24, 0xD0	; 208
     44c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     450:	e8 0e       	add	r14, r24
     452:	f9 1e       	adc	r15, r25
			// read raw Y acceleration from fifo
			yi1 += MPU6050_signed_readreg(MPU60501,0x3D);   
     454:	6d e3       	ldi	r22, 0x3D	; 61
     456:	80 ed       	ldi	r24, 0xD0	; 208
     458:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     45c:	08 0f       	add	r16, r24
     45e:	19 1f       	adc	r17, r25
			// read raw Z acceleration from fifo
			zi1 += MPU6050_signed_readreg(MPU60501,0x3F);   			
     460:	6f e3       	ldi	r22, 0x3F	; 63
     462:	80 ed       	ldi	r24, 0xD0	; 208
     464:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     468:	88 0e       	add	r8, r24
     46a:	99 1e       	adc	r9, r25
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	cf 1a       	sub	r12, r31
     470:	d1 08       	sbc	r13, r1
	_delay_ms(200);  // Wait for 200 ms.
	Init_MPU6050(MPU60501);    // sensor init
	_delay_ms(200);     // Wait for 200 ms.
	snprintf(outs,sizeof(outs),"6050 initialized \n\r");
	USART_tx_string(outs);
	for(int i = 0; i<10; i++)//get values for initial calibration
     472:	51 f7       	brne	.-44     	; 0x448 <main+0x7c>
			yi1 += MPU6050_signed_readreg(MPU60501,0x3D);   
			// read raw Z acceleration from fifo
			zi1 += MPU6050_signed_readreg(MPU60501,0x3F);   			
	}
	//average values for calibration
	xi1 = xi1/10;
     474:	2a e0       	ldi	r18, 0x0A	; 10
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	c7 01       	movw	r24, r14
     47a:	b9 01       	movw	r22, r18
     47c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     480:	7b 01       	movw	r14, r22
	yi1 = yi1/10;
     482:	c8 01       	movw	r24, r16
     484:	b9 01       	movw	r22, r18
     486:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     48a:	8b 01       	movw	r16, r22
	zi1 = zi1/10;
     48c:	c4 01       	movw	r24, r8
     48e:	b9 01       	movw	r22, r18
     490:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
	//Start infinite loop
	while(1){
		//grab 3 values, average, subtract calibration value, and divide by MSB
		// read raw X acceleration from fifo
		xa1 = MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B);   		
		xa1 = ((xa1/3)-xi1)/2048.00;
     494:	c7 01       	movw	r24, r14
     496:	ff 0c       	add	r15, r15
     498:	aa 0b       	sbc	r26, r26
     49a:	bb 0b       	sbc	r27, r27
     49c:	8d 83       	std	Y+5, r24	; 0x05
     49e:	9e 83       	std	Y+6, r25	; 0x06
     4a0:	af 83       	std	Y+7, r26	; 0x07
     4a2:	b8 87       	std	Y+8, r27	; 0x08
		// read raw Y acceleration from fifo
		ya1 = MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D);   
		ya1 = ((ya1/3)-yi1)/2048.00;
     4a4:	c8 01       	movw	r24, r16
     4a6:	11 0f       	add	r17, r17
     4a8:	aa 0b       	sbc	r26, r26
     4aa:	bb 0b       	sbc	r27, r27
     4ac:	89 87       	std	Y+9, r24	; 0x09
     4ae:	9a 87       	std	Y+10, r25	; 0x0a
     4b0:	ab 87       	std	Y+11, r26	; 0x0b
     4b2:	bc 87       	std	Y+12, r27	; 0x0c
		// read raw Z acceleration from fifo
		za1 = MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F);   
		za1 = ((za1/3)-zi1)/2048.00;
     4b4:	cb 01       	movw	r24, r22
     4b6:	77 0f       	add	r23, r23
     4b8:	aa 0b       	sbc	r26, r26
     4ba:	bb 0b       	sbc	r27, r27
     4bc:	8d 87       	std	Y+13, r24	; 0x0d
     4be:	9e 87       	std	Y+14, r25	; 0x0e
     4c0:	af 87       	std	Y+15, r26	; 0x0f
     4c2:	b8 8b       	std	Y+16, r27	; 0x10
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f5 e4       	ldi	r31, 0x45	; 69
     4c8:	2f 2e       	mov	r2, r31
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	3f 2e       	mov	r3, r31
     4ce:	f0 2d       	mov	r31, r0
     4d0:	0f 2e       	mov	r0, r31
     4d2:	f2 e3       	ldi	r31, 0x32	; 50
     4d4:	bf 2e       	mov	r11, r31
     4d6:	f0 2d       	mov	r31, r0
     4d8:	0f 2e       	mov	r0, r31
     4da:	fa e6       	ldi	r31, 0x6A	; 106
     4dc:	8f 2e       	mov	r8, r31
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	9f 2e       	mov	r9, r31
     4e2:	f0 2d       	mov	r31, r0
	
	//Start infinite loop
	while(1){
		//grab 3 values, average, subtract calibration value, and divide by MSB
		// read raw X acceleration from fifo
		xa1 = MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B);   		
     4e4:	6b e3       	ldi	r22, 0x3B	; 59
     4e6:	80 ed       	ldi	r24, 0xD0	; 208
     4e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4ec:	8c 01       	movw	r16, r24
     4ee:	6b e3       	ldi	r22, 0x3B	; 59
     4f0:	80 ed       	ldi	r24, 0xD0	; 208
     4f2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4f6:	08 0f       	add	r16, r24
     4f8:	19 1f       	adc	r17, r25
     4fa:	6b e3       	ldi	r22, 0x3B	; 59
     4fc:	80 ed       	ldi	r24, 0xD0	; 208
     4fe:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     502:	80 0f       	add	r24, r16
     504:	91 1f       	adc	r25, r17
     506:	bc 01       	movw	r22, r24
     508:	99 0f       	add	r25, r25
     50a:	88 0b       	sbc	r24, r24
     50c:	99 0b       	sbc	r25, r25
     50e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
		xa1 = ((xa1/3)-xi1)/2048.00;
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e4       	ldi	r20, 0x40	; 64
     518:	50 e4       	ldi	r21, 0x40	; 64
     51a:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
     522:	6d 81       	ldd	r22, Y+5	; 0x05
     524:	7e 81       	ldd	r23, Y+6	; 0x06
     526:	8f 81       	ldd	r24, Y+7	; 0x07
     528:	98 85       	ldd	r25, Y+8	; 0x08
     52a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
     52e:	9b 01       	movw	r18, r22
     530:	ac 01       	movw	r20, r24
     532:	c7 01       	movw	r24, r14
     534:	b6 01       	movw	r22, r12
     536:	0e 94 de 03 	call	0x7bc	; 0x7bc <__subsf3>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	5a e3       	ldi	r21, 0x3A	; 58
     542:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
		// read raw Y acceleration from fifo
		ya1 = MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D);   
     54a:	6d e3       	ldi	r22, 0x3D	; 61
     54c:	80 ed       	ldi	r24, 0xD0	; 208
     54e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     552:	8c 01       	movw	r16, r24
     554:	6d e3       	ldi	r22, 0x3D	; 61
     556:	80 ed       	ldi	r24, 0xD0	; 208
     558:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     55c:	08 0f       	add	r16, r24
     55e:	19 1f       	adc	r17, r25
     560:	6d e3       	ldi	r22, 0x3D	; 61
     562:	80 ed       	ldi	r24, 0xD0	; 208
     564:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     568:	80 0f       	add	r24, r16
     56a:	91 1f       	adc	r25, r17
     56c:	bc 01       	movw	r22, r24
     56e:	99 0f       	add	r25, r25
     570:	88 0b       	sbc	r24, r24
     572:	99 0b       	sbc	r25, r25
     574:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
		ya1 = ((ya1/3)-yi1)/2048.00;
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e4       	ldi	r20, 0x40	; 64
     57e:	50 e4       	ldi	r21, 0x40	; 64
     580:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
     584:	2b 01       	movw	r4, r22
     586:	3c 01       	movw	r6, r24
     588:	69 85       	ldd	r22, Y+9	; 0x09
     58a:	7a 85       	ldd	r23, Y+10	; 0x0a
     58c:	8b 85       	ldd	r24, Y+11	; 0x0b
     58e:	9c 85       	ldd	r25, Y+12	; 0x0c
     590:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	c3 01       	movw	r24, r6
     59a:	b2 01       	movw	r22, r4
     59c:	0e 94 de 03 	call	0x7bc	; 0x7bc <__subsf3>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	5a e3       	ldi	r21, 0x3A	; 58
     5a8:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     5ac:	2b 01       	movw	r4, r22
     5ae:	3c 01       	movw	r6, r24
		// read raw Z acceleration from fifo
		za1 = MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F);   
     5b0:	6f e3       	ldi	r22, 0x3F	; 63
     5b2:	80 ed       	ldi	r24, 0xD0	; 208
     5b4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5b8:	8c 01       	movw	r16, r24
     5ba:	6f e3       	ldi	r22, 0x3F	; 63
     5bc:	80 ed       	ldi	r24, 0xD0	; 208
     5be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5c2:	08 0f       	add	r16, r24
     5c4:	19 1f       	adc	r17, r25
     5c6:	6f e3       	ldi	r22, 0x3F	; 63
     5c8:	80 ed       	ldi	r24, 0xD0	; 208
     5ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5ce:	80 0f       	add	r24, r16
     5d0:	91 1f       	adc	r25, r17
     5d2:	bc 01       	movw	r22, r24
     5d4:	99 0f       	add	r25, r25
     5d6:	88 0b       	sbc	r24, r24
     5d8:	99 0b       	sbc	r25, r25
     5da:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
		za1 = ((za1/3)-zi1)/2048.00;
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e4       	ldi	r20, 0x40	; 64
     5e4:	50 e4       	ldi	r21, 0x40	; 64
     5e6:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
     5ea:	69 83       	std	Y+1, r22	; 0x01
     5ec:	7a 83       	std	Y+2, r23	; 0x02
     5ee:	8b 83       	std	Y+3, r24	; 0x03
     5f0:	9c 83       	std	Y+4, r25	; 0x04
     5f2:	6d 85       	ldd	r22, Y+13	; 0x0d
     5f4:	7e 85       	ldd	r23, Y+14	; 0x0e
     5f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5f8:	98 89       	ldd	r25, Y+16	; 0x10
     5fa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
     5fe:	9b 01       	movw	r18, r22
     600:	ac 01       	movw	r20, r24
     602:	69 81       	ldd	r22, Y+1	; 0x01
     604:	7a 81       	ldd	r23, Y+2	; 0x02
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	0e 94 de 03 	call	0x7bc	; 0x7bc <__subsf3>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	5a e3       	ldi	r21, 0x3A	; 58
     616:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     61a:	69 83       	std	Y+1, r22	; 0x01
     61c:	7a 83       	std	Y+2, r23	; 0x02
     61e:	8b 83       	std	Y+3, r24	; 0x03
     620:	9c 83       	std	Y+4, r25	; 0x04
		y1 = abs((int)(ya1 *10)%10);
		y2 = abs((int)(ya1 *100)%10);
		
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	48 ec       	ldi	r20, 0xC8	; 200
     628:	52 e4       	ldi	r21, 0x42	; 66
     62a:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     62e:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     632:	cb 01       	movw	r24, r22
     634:	6a e0       	ldi	r22, 0x0A	; 10
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     63c:	9c 01       	movw	r18, r24
     63e:	99 23       	and	r25, r25
     640:	24 f4       	brge	.+8      	; 0x64a <main+0x27e>
     642:	22 27       	eor	r18, r18
     644:	33 27       	eor	r19, r19
     646:	28 1b       	sub	r18, r24
     648:	39 0b       	sbc	r19, r25
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     64a:	3f 93       	push	r19
     64c:	2f 93       	push	r18
		y0 = (int)ya1%10;
		y1 = abs((int)(ya1 *10)%10);
		y2 = abs((int)(ya1 *100)%10);
		
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e2       	ldi	r20, 0x20	; 32
     654:	51 e4       	ldi	r21, 0x41	; 65
     656:	69 81       	ldd	r22, Y+1	; 0x01
     658:	7a 81       	ldd	r23, Y+2	; 0x02
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     662:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     666:	cb 01       	movw	r24, r22
     668:	6a e0       	ldi	r22, 0x0A	; 10
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     670:	9c 01       	movw	r18, r24
     672:	99 23       	and	r25, r25
     674:	24 f4       	brge	.+8      	; 0x67e <main+0x2b2>
     676:	22 27       	eor	r18, r18
     678:	33 27       	eor	r19, r19
     67a:	28 1b       	sub	r18, r24
     67c:	39 0b       	sbc	r19, r25
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     67e:	3f 93       	push	r19
     680:	2f 93       	push	r18
		
		y0 = (int)ya1%10;
		y1 = abs((int)(ya1 *10)%10);
		y2 = abs((int)(ya1 *100)%10);
		
		z0 = (int)za1%10;
     682:	69 81       	ldd	r22, Y+1	; 0x01
     684:	7a 81       	ldd	r23, Y+2	; 0x02
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     68e:	cb 01       	movw	r24, r22
     690:	6a e0       	ldi	r22, 0x0A	; 10
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     698:	9f 93       	push	r25
     69a:	8f 93       	push	r24
		x1 = abs((int)(xa1 *10)%10); // tenths place
		x2 = abs((int)(xa1 *100)%10); // hundredths place
		
		y0 = (int)ya1%10;
		y1 = abs((int)(ya1 *10)%10);
		y2 = abs((int)(ya1 *100)%10);
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	48 ec       	ldi	r20, 0xC8	; 200
     6a2:	52 e4       	ldi	r21, 0x42	; 66
     6a4:	c3 01       	movw	r24, r6
     6a6:	b2 01       	movw	r22, r4
     6a8:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     6ac:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     6b0:	cb 01       	movw	r24, r22
     6b2:	6a e0       	ldi	r22, 0x0A	; 10
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     6ba:	9c 01       	movw	r18, r24
     6bc:	99 23       	and	r25, r25
     6be:	24 f4       	brge	.+8      	; 0x6c8 <main+0x2fc>
     6c0:	22 27       	eor	r18, r18
     6c2:	33 27       	eor	r19, r19
     6c4:	28 1b       	sub	r18, r24
     6c6:	39 0b       	sbc	r19, r25
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     6c8:	3f 93       	push	r19
     6ca:	2f 93       	push	r18
		x0 = (int)xa1%10; // ones place
		x1 = abs((int)(xa1 *10)%10); // tenths place
		x2 = abs((int)(xa1 *100)%10); // hundredths place
		
		y0 = (int)ya1%10;
		y1 = abs((int)(ya1 *10)%10);
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e2       	ldi	r20, 0x20	; 32
     6d2:	51 e4       	ldi	r21, 0x41	; 65
     6d4:	c3 01       	movw	r24, r6
     6d6:	b2 01       	movw	r22, r4
     6d8:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     6dc:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     6e0:	cb 01       	movw	r24, r22
     6e2:	6a e0       	ldi	r22, 0x0A	; 10
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     6ea:	9c 01       	movw	r18, r24
     6ec:	99 23       	and	r25, r25
     6ee:	24 f4       	brge	.+8      	; 0x6f8 <main+0x32c>
     6f0:	22 27       	eor	r18, r18
     6f2:	33 27       	eor	r19, r19
     6f4:	28 1b       	sub	r18, r24
     6f6:	39 0b       	sbc	r19, r25
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     6f8:	3f 93       	push	r19
     6fa:	2f 93       	push	r18
		//convert doubles to printable strings
		x0 = (int)xa1%10; // ones place
		x1 = abs((int)(xa1 *10)%10); // tenths place
		x2 = abs((int)(xa1 *100)%10); // hundredths place
		
		y0 = (int)ya1%10;
     6fc:	c3 01       	movw	r24, r6
     6fe:	b2 01       	movw	r22, r4
     700:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     704:	cb 01       	movw	r24, r22
     706:	6a e0       	ldi	r22, 0x0A	; 10
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24

		
		//convert doubles to printable strings
		x0 = (int)xa1%10; // ones place
		x1 = abs((int)(xa1 *10)%10); // tenths place
		x2 = abs((int)(xa1 *100)%10); // hundredths place
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	48 ec       	ldi	r20, 0xC8	; 200
     718:	52 e4       	ldi	r21, 0x42	; 66
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     722:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     726:	cb 01       	movw	r24, r22
     728:	6a e0       	ldi	r22, 0x0A	; 10
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     730:	9c 01       	movw	r18, r24
     732:	99 23       	and	r25, r25
     734:	24 f4       	brge	.+8      	; 0x73e <main+0x372>
     736:	22 27       	eor	r18, r18
     738:	33 27       	eor	r19, r19
     73a:	28 1b       	sub	r18, r24
     73c:	39 0b       	sbc	r19, r25
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     73e:	3f 93       	push	r19
     740:	2f 93       	push	r18


		
		//convert doubles to printable strings
		x0 = (int)xa1%10; // ones place
		x1 = abs((int)(xa1 *10)%10); // tenths place
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e2       	ldi	r20, 0x20	; 32
     748:	51 e4       	ldi	r21, 0x41	; 65
     74a:	c7 01       	movw	r24, r14
     74c:	b6 01       	movw	r22, r12
     74e:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3>
     752:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     756:	cb 01       	movw	r24, r22
     758:	6a e0       	ldi	r22, 0x0A	; 10
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
     760:	9c 01       	movw	r18, r24
     762:	99 23       	and	r25, r25
     764:	24 f4       	brge	.+8      	; 0x76e <main+0x3a2>
     766:	22 27       	eor	r18, r18
     768:	33 27       	eor	r19, r19
     76a:	28 1b       	sub	r18, r24
     76c:	39 0b       	sbc	r19, r25
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     76e:	3f 93       	push	r19
     770:	2f 93       	push	r18
		


		
		//convert doubles to printable strings
		x0 = (int)xa1%10; // ones place
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixsfsi>
     77a:	cb 01       	movw	r24, r22
     77c:	6a e0       	ldi	r22, 0x0A	; 10
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__divmodhi4>
		z0 = (int)za1%10;
		z1 = abs((int)(za1 *10)%10);
		z2 = abs((int)(za1 *100)%10);
		
		//print out the values		
		snprintf(outs,sizeof(outs),"x: %i.%i%i, y: %i.%i%i, z: %i.%i%i\n\r",x0,x1,x2,y0,y1,y2,z0,z1,z2); // print all data on one line
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	3f 92       	push	r3
     78a:	2f 92       	push	r2
     78c:	1f 92       	push	r1
     78e:	bf 92       	push	r11
     790:	9f 92       	push	r9
     792:	8f 92       	push	r8
     794:	0e 94 16 06 	call	0xc2c	; 0xc2c <snprintf>
		USART_tx_string(outs); // tx
     798:	c4 01       	movw	r24, r8
     79a:	0e 94 57 01 	call	0x2ae	; 0x2ae <USART_tx_string>
     79e:	9f ef       	ldi	r25, 0xFF	; 255
     7a0:	a4 e3       	ldi	r26, 0x34	; 52
     7a2:	bc e0       	ldi	r27, 0x0C	; 12
     7a4:	91 50       	subi	r25, 0x01	; 1
     7a6:	a0 40       	sbci	r26, 0x00	; 0
     7a8:	b0 40       	sbci	r27, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x3d8>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x3e2>
     7ae:	00 00       	nop
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	94 ce       	rjmp	.-728    	; 0x4e4 <main+0x118>

000007bc <__subsf3>:
     7bc:	50 58       	subi	r21, 0x80	; 128

000007be <__addsf3>:
     7be:	bb 27       	eor	r27, r27
     7c0:	aa 27       	eor	r26, r26
     7c2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__addsf3x>
     7c6:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_round>
     7ca:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_pscA>
     7ce:	38 f0       	brcs	.+14     	; 0x7de <__addsf3+0x20>
     7d0:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscB>
     7d4:	20 f0       	brcs	.+8      	; 0x7de <__addsf3+0x20>
     7d6:	39 f4       	brne	.+14     	; 0x7e6 <__addsf3+0x28>
     7d8:	9f 3f       	cpi	r25, 0xFF	; 255
     7da:	19 f4       	brne	.+6      	; 0x7e2 <__addsf3+0x24>
     7dc:	26 f4       	brtc	.+8      	; 0x7e6 <__addsf3+0x28>
     7de:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_nan>
     7e2:	0e f4       	brtc	.+2      	; 0x7e6 <__addsf3+0x28>
     7e4:	e0 95       	com	r30
     7e6:	e7 fb       	bst	r30, 7
     7e8:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>

000007ec <__addsf3x>:
     7ec:	e9 2f       	mov	r30, r25
     7ee:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
     7f2:	58 f3       	brcs	.-42     	; 0x7ca <__addsf3+0xc>
     7f4:	ba 17       	cp	r27, r26
     7f6:	62 07       	cpc	r22, r18
     7f8:	73 07       	cpc	r23, r19
     7fa:	84 07       	cpc	r24, r20
     7fc:	95 07       	cpc	r25, r21
     7fe:	20 f0       	brcs	.+8      	; 0x808 <__addsf3x+0x1c>
     800:	79 f4       	brne	.+30     	; 0x820 <__addsf3x+0x34>
     802:	a6 f5       	brtc	.+104    	; 0x86c <__addsf3x+0x80>
     804:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_zero>
     808:	0e f4       	brtc	.+2      	; 0x80c <__addsf3x+0x20>
     80a:	e0 95       	com	r30
     80c:	0b 2e       	mov	r0, r27
     80e:	ba 2f       	mov	r27, r26
     810:	a0 2d       	mov	r26, r0
     812:	0b 01       	movw	r0, r22
     814:	b9 01       	movw	r22, r18
     816:	90 01       	movw	r18, r0
     818:	0c 01       	movw	r0, r24
     81a:	ca 01       	movw	r24, r20
     81c:	a0 01       	movw	r20, r0
     81e:	11 24       	eor	r1, r1
     820:	ff 27       	eor	r31, r31
     822:	59 1b       	sub	r21, r25
     824:	99 f0       	breq	.+38     	; 0x84c <__addsf3x+0x60>
     826:	59 3f       	cpi	r21, 0xF9	; 249
     828:	50 f4       	brcc	.+20     	; 0x83e <__addsf3x+0x52>
     82a:	50 3e       	cpi	r21, 0xE0	; 224
     82c:	68 f1       	brcs	.+90     	; 0x888 <__addsf3x+0x9c>
     82e:	1a 16       	cp	r1, r26
     830:	f0 40       	sbci	r31, 0x00	; 0
     832:	a2 2f       	mov	r26, r18
     834:	23 2f       	mov	r18, r19
     836:	34 2f       	mov	r19, r20
     838:	44 27       	eor	r20, r20
     83a:	58 5f       	subi	r21, 0xF8	; 248
     83c:	f3 cf       	rjmp	.-26     	; 0x824 <__addsf3x+0x38>
     83e:	46 95       	lsr	r20
     840:	37 95       	ror	r19
     842:	27 95       	ror	r18
     844:	a7 95       	ror	r26
     846:	f0 40       	sbci	r31, 0x00	; 0
     848:	53 95       	inc	r21
     84a:	c9 f7       	brne	.-14     	; 0x83e <__addsf3x+0x52>
     84c:	7e f4       	brtc	.+30     	; 0x86c <__addsf3x+0x80>
     84e:	1f 16       	cp	r1, r31
     850:	ba 0b       	sbc	r27, r26
     852:	62 0b       	sbc	r22, r18
     854:	73 0b       	sbc	r23, r19
     856:	84 0b       	sbc	r24, r20
     858:	ba f0       	brmi	.+46     	; 0x888 <__addsf3x+0x9c>
     85a:	91 50       	subi	r25, 0x01	; 1
     85c:	a1 f0       	breq	.+40     	; 0x886 <__addsf3x+0x9a>
     85e:	ff 0f       	add	r31, r31
     860:	bb 1f       	adc	r27, r27
     862:	66 1f       	adc	r22, r22
     864:	77 1f       	adc	r23, r23
     866:	88 1f       	adc	r24, r24
     868:	c2 f7       	brpl	.-16     	; 0x85a <__addsf3x+0x6e>
     86a:	0e c0       	rjmp	.+28     	; 0x888 <__addsf3x+0x9c>
     86c:	ba 0f       	add	r27, r26
     86e:	62 1f       	adc	r22, r18
     870:	73 1f       	adc	r23, r19
     872:	84 1f       	adc	r24, r20
     874:	48 f4       	brcc	.+18     	; 0x888 <__addsf3x+0x9c>
     876:	87 95       	ror	r24
     878:	77 95       	ror	r23
     87a:	67 95       	ror	r22
     87c:	b7 95       	ror	r27
     87e:	f7 95       	ror	r31
     880:	9e 3f       	cpi	r25, 0xFE	; 254
     882:	08 f0       	brcs	.+2      	; 0x886 <__addsf3x+0x9a>
     884:	b0 cf       	rjmp	.-160    	; 0x7e6 <__addsf3+0x28>
     886:	93 95       	inc	r25
     888:	88 0f       	add	r24, r24
     88a:	08 f0       	brcs	.+2      	; 0x88e <__addsf3x+0xa2>
     88c:	99 27       	eor	r25, r25
     88e:	ee 0f       	add	r30, r30
     890:	97 95       	ror	r25
     892:	87 95       	ror	r24
     894:	08 95       	ret

00000896 <__divsf3>:
     896:	0e 94 5f 04 	call	0x8be	; 0x8be <__divsf3x>
     89a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_round>
     89e:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscB>
     8a2:	58 f0       	brcs	.+22     	; 0x8ba <__divsf3+0x24>
     8a4:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_pscA>
     8a8:	40 f0       	brcs	.+16     	; 0x8ba <__divsf3+0x24>
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <__divsf3+0x20>
     8ac:	5f 3f       	cpi	r21, 0xFF	; 255
     8ae:	29 f0       	breq	.+10     	; 0x8ba <__divsf3+0x24>
     8b0:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
     8b4:	51 11       	cpse	r21, r1
     8b6:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
     8ba:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_nan>

000008be <__divsf3x>:
     8be:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
     8c2:	68 f3       	brcs	.-38     	; 0x89e <__divsf3+0x8>

000008c4 <__divsf3_pse>:
     8c4:	99 23       	and	r25, r25
     8c6:	b1 f3       	breq	.-20     	; 0x8b4 <__divsf3+0x1e>
     8c8:	55 23       	and	r21, r21
     8ca:	91 f3       	breq	.-28     	; 0x8b0 <__divsf3+0x1a>
     8cc:	95 1b       	sub	r25, r21
     8ce:	55 0b       	sbc	r21, r21
     8d0:	bb 27       	eor	r27, r27
     8d2:	aa 27       	eor	r26, r26
     8d4:	62 17       	cp	r22, r18
     8d6:	73 07       	cpc	r23, r19
     8d8:	84 07       	cpc	r24, r20
     8da:	38 f0       	brcs	.+14     	; 0x8ea <__divsf3_pse+0x26>
     8dc:	9f 5f       	subi	r25, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	22 0f       	add	r18, r18
     8e2:	33 1f       	adc	r19, r19
     8e4:	44 1f       	adc	r20, r20
     8e6:	aa 1f       	adc	r26, r26
     8e8:	a9 f3       	breq	.-22     	; 0x8d4 <__divsf3_pse+0x10>
     8ea:	35 d0       	rcall	.+106    	; 0x956 <__stack+0x57>
     8ec:	0e 2e       	mov	r0, r30
     8ee:	3a f0       	brmi	.+14     	; 0x8fe <__divsf3_pse+0x3a>
     8f0:	e0 e8       	ldi	r30, 0x80	; 128
     8f2:	32 d0       	rcall	.+100    	; 0x958 <__stack+0x59>
     8f4:	91 50       	subi	r25, 0x01	; 1
     8f6:	50 40       	sbci	r21, 0x00	; 0
     8f8:	e6 95       	lsr	r30
     8fa:	00 1c       	adc	r0, r0
     8fc:	ca f7       	brpl	.-14     	; 0x8f0 <__divsf3_pse+0x2c>
     8fe:	2b d0       	rcall	.+86     	; 0x956 <__stack+0x57>
     900:	fe 2f       	mov	r31, r30
     902:	29 d0       	rcall	.+82     	; 0x956 <__stack+0x57>
     904:	66 0f       	add	r22, r22
     906:	77 1f       	adc	r23, r23
     908:	88 1f       	adc	r24, r24
     90a:	bb 1f       	adc	r27, r27
     90c:	26 17       	cp	r18, r22
     90e:	37 07       	cpc	r19, r23
     910:	48 07       	cpc	r20, r24
     912:	ab 07       	cpc	r26, r27
     914:	b0 e8       	ldi	r27, 0x80	; 128
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x1b>
     918:	bb 0b       	sbc	r27, r27
     91a:	80 2d       	mov	r24, r0
     91c:	bf 01       	movw	r22, r30
     91e:	ff 27       	eor	r31, r31
     920:	93 58       	subi	r25, 0x83	; 131
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	3a f0       	brmi	.+14     	; 0x934 <__stack+0x35>
     926:	9e 3f       	cpi	r25, 0xFE	; 254
     928:	51 05       	cpc	r21, r1
     92a:	78 f0       	brcs	.+30     	; 0x94a <__stack+0x4b>
     92c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
     930:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
     934:	5f 3f       	cpi	r21, 0xFF	; 255
     936:	e4 f3       	brlt	.-8      	; 0x930 <__stack+0x31>
     938:	98 3e       	cpi	r25, 0xE8	; 232
     93a:	d4 f3       	brlt	.-12     	; 0x930 <__stack+0x31>
     93c:	86 95       	lsr	r24
     93e:	77 95       	ror	r23
     940:	67 95       	ror	r22
     942:	b7 95       	ror	r27
     944:	f7 95       	ror	r31
     946:	9f 5f       	subi	r25, 0xFF	; 255
     948:	c9 f7       	brne	.-14     	; 0x93c <__stack+0x3d>
     94a:	88 0f       	add	r24, r24
     94c:	91 1d       	adc	r25, r1
     94e:	96 95       	lsr	r25
     950:	87 95       	ror	r24
     952:	97 f9       	bld	r25, 7
     954:	08 95       	ret
     956:	e1 e0       	ldi	r30, 0x01	; 1
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	88 1f       	adc	r24, r24
     95e:	bb 1f       	adc	r27, r27
     960:	62 17       	cp	r22, r18
     962:	73 07       	cpc	r23, r19
     964:	84 07       	cpc	r24, r20
     966:	ba 07       	cpc	r27, r26
     968:	20 f0       	brcs	.+8      	; 0x972 <__stack+0x73>
     96a:	62 1b       	sub	r22, r18
     96c:	73 0b       	sbc	r23, r19
     96e:	84 0b       	sbc	r24, r20
     970:	ba 0b       	sbc	r27, r26
     972:	ee 1f       	adc	r30, r30
     974:	88 f7       	brcc	.-30     	; 0x958 <__stack+0x59>
     976:	e0 95       	com	r30
     978:	08 95       	ret

0000097a <__fixsfsi>:
     97a:	0e 94 c4 04 	call	0x988	; 0x988 <__fixunssfsi>
     97e:	68 94       	set
     980:	b1 11       	cpse	r27, r1
     982:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
     986:	08 95       	ret

00000988 <__fixunssfsi>:
     988:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_splitA>
     98c:	88 f0       	brcs	.+34     	; 0x9b0 <__fixunssfsi+0x28>
     98e:	9f 57       	subi	r25, 0x7F	; 127
     990:	98 f0       	brcs	.+38     	; 0x9b8 <__fixunssfsi+0x30>
     992:	b9 2f       	mov	r27, r25
     994:	99 27       	eor	r25, r25
     996:	b7 51       	subi	r27, 0x17	; 23
     998:	b0 f0       	brcs	.+44     	; 0x9c6 <__fixunssfsi+0x3e>
     99a:	e1 f0       	breq	.+56     	; 0x9d4 <__fixunssfsi+0x4c>
     99c:	66 0f       	add	r22, r22
     99e:	77 1f       	adc	r23, r23
     9a0:	88 1f       	adc	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	1a f0       	brmi	.+6      	; 0x9ac <__fixunssfsi+0x24>
     9a6:	ba 95       	dec	r27
     9a8:	c9 f7       	brne	.-14     	; 0x99c <__fixunssfsi+0x14>
     9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <__fixunssfsi+0x4c>
     9ac:	b1 30       	cpi	r27, 0x01	; 1
     9ae:	91 f0       	breq	.+36     	; 0x9d4 <__fixunssfsi+0x4c>
     9b0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_zero>
     9b4:	b1 e0       	ldi	r27, 0x01	; 1
     9b6:	08 95       	ret
     9b8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_zero>
     9bc:	67 2f       	mov	r22, r23
     9be:	78 2f       	mov	r23, r24
     9c0:	88 27       	eor	r24, r24
     9c2:	b8 5f       	subi	r27, 0xF8	; 248
     9c4:	39 f0       	breq	.+14     	; 0x9d4 <__fixunssfsi+0x4c>
     9c6:	b9 3f       	cpi	r27, 0xF9	; 249
     9c8:	cc f3       	brlt	.-14     	; 0x9bc <__fixunssfsi+0x34>
     9ca:	86 95       	lsr	r24
     9cc:	77 95       	ror	r23
     9ce:	67 95       	ror	r22
     9d0:	b3 95       	inc	r27
     9d2:	d9 f7       	brne	.-10     	; 0x9ca <__fixunssfsi+0x42>
     9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__fixunssfsi+0x5c>
     9d6:	90 95       	com	r25
     9d8:	80 95       	com	r24
     9da:	70 95       	com	r23
     9dc:	61 95       	neg	r22
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	8f 4f       	sbci	r24, 0xFF	; 255
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	08 95       	ret

000009e6 <__floatunsisf>:
     9e6:	e8 94       	clt
     9e8:	09 c0       	rjmp	.+18     	; 0x9fc <__floatsisf+0x12>

000009ea <__floatsisf>:
     9ea:	97 fb       	bst	r25, 7
     9ec:	3e f4       	brtc	.+14     	; 0x9fc <__floatsisf+0x12>
     9ee:	90 95       	com	r25
     9f0:	80 95       	com	r24
     9f2:	70 95       	com	r23
     9f4:	61 95       	neg	r22
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	8f 4f       	sbci	r24, 0xFF	; 255
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	99 23       	and	r25, r25
     9fe:	a9 f0       	breq	.+42     	; 0xa2a <__floatsisf+0x40>
     a00:	f9 2f       	mov	r31, r25
     a02:	96 e9       	ldi	r25, 0x96	; 150
     a04:	bb 27       	eor	r27, r27
     a06:	93 95       	inc	r25
     a08:	f6 95       	lsr	r31
     a0a:	87 95       	ror	r24
     a0c:	77 95       	ror	r23
     a0e:	67 95       	ror	r22
     a10:	b7 95       	ror	r27
     a12:	f1 11       	cpse	r31, r1
     a14:	f8 cf       	rjmp	.-16     	; 0xa06 <__floatsisf+0x1c>
     a16:	fa f4       	brpl	.+62     	; 0xa56 <__floatsisf+0x6c>
     a18:	bb 0f       	add	r27, r27
     a1a:	11 f4       	brne	.+4      	; 0xa20 <__floatsisf+0x36>
     a1c:	60 ff       	sbrs	r22, 0
     a1e:	1b c0       	rjmp	.+54     	; 0xa56 <__floatsisf+0x6c>
     a20:	6f 5f       	subi	r22, 0xFF	; 255
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	8f 4f       	sbci	r24, 0xFF	; 255
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	16 c0       	rjmp	.+44     	; 0xa56 <__floatsisf+0x6c>
     a2a:	88 23       	and	r24, r24
     a2c:	11 f0       	breq	.+4      	; 0xa32 <__floatsisf+0x48>
     a2e:	96 e9       	ldi	r25, 0x96	; 150
     a30:	11 c0       	rjmp	.+34     	; 0xa54 <__floatsisf+0x6a>
     a32:	77 23       	and	r23, r23
     a34:	21 f0       	breq	.+8      	; 0xa3e <__floatsisf+0x54>
     a36:	9e e8       	ldi	r25, 0x8E	; 142
     a38:	87 2f       	mov	r24, r23
     a3a:	76 2f       	mov	r23, r22
     a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__floatsisf+0x5e>
     a3e:	66 23       	and	r22, r22
     a40:	71 f0       	breq	.+28     	; 0xa5e <__floatsisf+0x74>
     a42:	96 e8       	ldi	r25, 0x86	; 134
     a44:	86 2f       	mov	r24, r22
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	2a f0       	brmi	.+10     	; 0xa56 <__floatsisf+0x6c>
     a4c:	9a 95       	dec	r25
     a4e:	66 0f       	add	r22, r22
     a50:	77 1f       	adc	r23, r23
     a52:	88 1f       	adc	r24, r24
     a54:	da f7       	brpl	.-10     	; 0xa4c <__floatsisf+0x62>
     a56:	88 0f       	add	r24, r24
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	97 f9       	bld	r25, 7
     a5e:	08 95       	ret

00000a60 <__fp_inf>:
     a60:	97 f9       	bld	r25, 7
     a62:	9f 67       	ori	r25, 0x7F	; 127
     a64:	80 e8       	ldi	r24, 0x80	; 128
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	08 95       	ret

00000a6c <__fp_nan>:
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
     a6e:	80 ec       	ldi	r24, 0xC0	; 192
     a70:	08 95       	ret

00000a72 <__fp_pscA>:
     a72:	00 24       	eor	r0, r0
     a74:	0a 94       	dec	r0
     a76:	16 16       	cp	r1, r22
     a78:	17 06       	cpc	r1, r23
     a7a:	18 06       	cpc	r1, r24
     a7c:	09 06       	cpc	r0, r25
     a7e:	08 95       	ret

00000a80 <__fp_pscB>:
     a80:	00 24       	eor	r0, r0
     a82:	0a 94       	dec	r0
     a84:	12 16       	cp	r1, r18
     a86:	13 06       	cpc	r1, r19
     a88:	14 06       	cpc	r1, r20
     a8a:	05 06       	cpc	r0, r21
     a8c:	08 95       	ret

00000a8e <__fp_round>:
     a8e:	09 2e       	mov	r0, r25
     a90:	03 94       	inc	r0
     a92:	00 0c       	add	r0, r0
     a94:	11 f4       	brne	.+4      	; 0xa9a <__fp_round+0xc>
     a96:	88 23       	and	r24, r24
     a98:	52 f0       	brmi	.+20     	; 0xaae <__fp_round+0x20>
     a9a:	bb 0f       	add	r27, r27
     a9c:	40 f4       	brcc	.+16     	; 0xaae <__fp_round+0x20>
     a9e:	bf 2b       	or	r27, r31
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <__fp_round+0x18>
     aa2:	60 ff       	sbrs	r22, 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <__fp_round+0x20>
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	8f 4f       	sbci	r24, 0xFF	; 255
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	08 95       	ret

00000ab0 <__fp_split3>:
     ab0:	57 fd       	sbrc	r21, 7
     ab2:	90 58       	subi	r25, 0x80	; 128
     ab4:	44 0f       	add	r20, r20
     ab6:	55 1f       	adc	r21, r21
     ab8:	59 f0       	breq	.+22     	; 0xad0 <__fp_splitA+0x10>
     aba:	5f 3f       	cpi	r21, 0xFF	; 255
     abc:	71 f0       	breq	.+28     	; 0xada <__fp_splitA+0x1a>
     abe:	47 95       	ror	r20

00000ac0 <__fp_splitA>:
     ac0:	88 0f       	add	r24, r24
     ac2:	97 fb       	bst	r25, 7
     ac4:	99 1f       	adc	r25, r25
     ac6:	61 f0       	breq	.+24     	; 0xae0 <__fp_splitA+0x20>
     ac8:	9f 3f       	cpi	r25, 0xFF	; 255
     aca:	79 f0       	breq	.+30     	; 0xaea <__fp_splitA+0x2a>
     acc:	87 95       	ror	r24
     ace:	08 95       	ret
     ad0:	12 16       	cp	r1, r18
     ad2:	13 06       	cpc	r1, r19
     ad4:	14 06       	cpc	r1, r20
     ad6:	55 1f       	adc	r21, r21
     ad8:	f2 cf       	rjmp	.-28     	; 0xabe <__fp_split3+0xe>
     ada:	46 95       	lsr	r20
     adc:	f1 df       	rcall	.-30     	; 0xac0 <__fp_splitA>
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__fp_splitA+0x30>
     ae0:	16 16       	cp	r1, r22
     ae2:	17 06       	cpc	r1, r23
     ae4:	18 06       	cpc	r1, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	f1 cf       	rjmp	.-30     	; 0xacc <__fp_splitA+0xc>
     aea:	86 95       	lsr	r24
     aec:	71 05       	cpc	r23, r1
     aee:	61 05       	cpc	r22, r1
     af0:	08 94       	sec
     af2:	08 95       	ret

00000af4 <__fp_zero>:
     af4:	e8 94       	clt

00000af6 <__fp_szero>:
     af6:	bb 27       	eor	r27, r27
     af8:	66 27       	eor	r22, r22
     afa:	77 27       	eor	r23, r23
     afc:	cb 01       	movw	r24, r22
     afe:	97 f9       	bld	r25, 7
     b00:	08 95       	ret

00000b02 <__mulsf3>:
     b02:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3x>
     b06:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_round>
     b0a:	0e 94 39 05 	call	0xa72	; 0xa72 <__fp_pscA>
     b0e:	38 f0       	brcs	.+14     	; 0xb1e <__mulsf3+0x1c>
     b10:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_pscB>
     b14:	20 f0       	brcs	.+8      	; 0xb1e <__mulsf3+0x1c>
     b16:	95 23       	and	r25, r21
     b18:	11 f0       	breq	.+4      	; 0xb1e <__mulsf3+0x1c>
     b1a:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
     b1e:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_nan>
     b22:	11 24       	eor	r1, r1
     b24:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>

00000b28 <__mulsf3x>:
     b28:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_split3>
     b2c:	70 f3       	brcs	.-36     	; 0xb0a <__mulsf3+0x8>

00000b2e <__mulsf3_pse>:
     b2e:	95 9f       	mul	r25, r21
     b30:	c1 f3       	breq	.-16     	; 0xb22 <__mulsf3+0x20>
     b32:	95 0f       	add	r25, r21
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	55 1f       	adc	r21, r21
     b38:	62 9f       	mul	r22, r18
     b3a:	f0 01       	movw	r30, r0
     b3c:	72 9f       	mul	r23, r18
     b3e:	bb 27       	eor	r27, r27
     b40:	f0 0d       	add	r31, r0
     b42:	b1 1d       	adc	r27, r1
     b44:	63 9f       	mul	r22, r19
     b46:	aa 27       	eor	r26, r26
     b48:	f0 0d       	add	r31, r0
     b4a:	b1 1d       	adc	r27, r1
     b4c:	aa 1f       	adc	r26, r26
     b4e:	64 9f       	mul	r22, r20
     b50:	66 27       	eor	r22, r22
     b52:	b0 0d       	add	r27, r0
     b54:	a1 1d       	adc	r26, r1
     b56:	66 1f       	adc	r22, r22
     b58:	82 9f       	mul	r24, r18
     b5a:	22 27       	eor	r18, r18
     b5c:	b0 0d       	add	r27, r0
     b5e:	a1 1d       	adc	r26, r1
     b60:	62 1f       	adc	r22, r18
     b62:	73 9f       	mul	r23, r19
     b64:	b0 0d       	add	r27, r0
     b66:	a1 1d       	adc	r26, r1
     b68:	62 1f       	adc	r22, r18
     b6a:	83 9f       	mul	r24, r19
     b6c:	a0 0d       	add	r26, r0
     b6e:	61 1d       	adc	r22, r1
     b70:	22 1f       	adc	r18, r18
     b72:	74 9f       	mul	r23, r20
     b74:	33 27       	eor	r19, r19
     b76:	a0 0d       	add	r26, r0
     b78:	61 1d       	adc	r22, r1
     b7a:	23 1f       	adc	r18, r19
     b7c:	84 9f       	mul	r24, r20
     b7e:	60 0d       	add	r22, r0
     b80:	21 1d       	adc	r18, r1
     b82:	82 2f       	mov	r24, r18
     b84:	76 2f       	mov	r23, r22
     b86:	6a 2f       	mov	r22, r26
     b88:	11 24       	eor	r1, r1
     b8a:	9f 57       	subi	r25, 0x7F	; 127
     b8c:	50 40       	sbci	r21, 0x00	; 0
     b8e:	9a f0       	brmi	.+38     	; 0xbb6 <__mulsf3_pse+0x88>
     b90:	f1 f0       	breq	.+60     	; 0xbce <__mulsf3_pse+0xa0>
     b92:	88 23       	and	r24, r24
     b94:	4a f0       	brmi	.+18     	; 0xba8 <__mulsf3_pse+0x7a>
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	bb 1f       	adc	r27, r27
     b9c:	66 1f       	adc	r22, r22
     b9e:	77 1f       	adc	r23, r23
     ba0:	88 1f       	adc	r24, r24
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	50 40       	sbci	r21, 0x00	; 0
     ba6:	a9 f7       	brne	.-22     	; 0xb92 <__mulsf3_pse+0x64>
     ba8:	9e 3f       	cpi	r25, 0xFE	; 254
     baa:	51 05       	cpc	r21, r1
     bac:	80 f0       	brcs	.+32     	; 0xbce <__mulsf3_pse+0xa0>
     bae:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_inf>
     bb2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_szero>
     bb6:	5f 3f       	cpi	r21, 0xFF	; 255
     bb8:	e4 f3       	brlt	.-8      	; 0xbb2 <__mulsf3_pse+0x84>
     bba:	98 3e       	cpi	r25, 0xE8	; 232
     bbc:	d4 f3       	brlt	.-12     	; 0xbb2 <__mulsf3_pse+0x84>
     bbe:	86 95       	lsr	r24
     bc0:	77 95       	ror	r23
     bc2:	67 95       	ror	r22
     bc4:	b7 95       	ror	r27
     bc6:	f7 95       	ror	r31
     bc8:	e7 95       	ror	r30
     bca:	9f 5f       	subi	r25, 0xFF	; 255
     bcc:	c1 f7       	brne	.-16     	; 0xbbe <__mulsf3_pse+0x90>
     bce:	fe 2b       	or	r31, r30
     bd0:	88 0f       	add	r24, r24
     bd2:	91 1d       	adc	r25, r1
     bd4:	96 95       	lsr	r25
     bd6:	87 95       	ror	r24
     bd8:	97 f9       	bld	r25, 7
     bda:	08 95       	ret

00000bdc <__divmodhi4>:
     bdc:	97 fb       	bst	r25, 7
     bde:	07 2e       	mov	r0, r23
     be0:	16 f4       	brtc	.+4      	; 0xbe6 <__divmodhi4+0xa>
     be2:	00 94       	com	r0
     be4:	07 d0       	rcall	.+14     	; 0xbf4 <__divmodhi4_neg1>
     be6:	77 fd       	sbrc	r23, 7
     be8:	09 d0       	rcall	.+18     	; 0xbfc <__divmodhi4_neg2>
     bea:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodhi4>
     bee:	07 fc       	sbrc	r0, 7
     bf0:	05 d0       	rcall	.+10     	; 0xbfc <__divmodhi4_neg2>
     bf2:	3e f4       	brtc	.+14     	; 0xc02 <__divmodhi4_exit>

00000bf4 <__divmodhi4_neg1>:
     bf4:	90 95       	com	r25
     bf6:	81 95       	neg	r24
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	08 95       	ret

00000bfc <__divmodhi4_neg2>:
     bfc:	70 95       	com	r23
     bfe:	61 95       	neg	r22
     c00:	7f 4f       	sbci	r23, 0xFF	; 255

00000c02 <__divmodhi4_exit>:
     c02:	08 95       	ret

00000c04 <__udivmodhi4>:
     c04:	aa 1b       	sub	r26, r26
     c06:	bb 1b       	sub	r27, r27
     c08:	51 e1       	ldi	r21, 0x11	; 17
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <__udivmodhi4_ep>

00000c0c <__udivmodhi4_loop>:
     c0c:	aa 1f       	adc	r26, r26
     c0e:	bb 1f       	adc	r27, r27
     c10:	a6 17       	cp	r26, r22
     c12:	b7 07       	cpc	r27, r23
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__udivmodhi4_ep>
     c16:	a6 1b       	sub	r26, r22
     c18:	b7 0b       	sbc	r27, r23

00000c1a <__udivmodhi4_ep>:
     c1a:	88 1f       	adc	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	5a 95       	dec	r21
     c20:	a9 f7       	brne	.-22     	; 0xc0c <__udivmodhi4_loop>
     c22:	80 95       	com	r24
     c24:	90 95       	com	r25
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	08 95       	ret

00000c2c <snprintf>:
     c2c:	ae e0       	ldi	r26, 0x0E	; 14
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ec e1       	ldi	r30, 0x1C	; 28
     c32:	f6 e0       	ldi	r31, 0x06	; 6
     c34:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__prologue_saves__+0x1c>
     c38:	0d 89       	ldd	r16, Y+21	; 0x15
     c3a:	1e 89       	ldd	r17, Y+22	; 0x16
     c3c:	8f 89       	ldd	r24, Y+23	; 0x17
     c3e:	98 8d       	ldd	r25, Y+24	; 0x18
     c40:	26 e0       	ldi	r18, 0x06	; 6
     c42:	2c 83       	std	Y+4, r18	; 0x04
     c44:	1a 83       	std	Y+2, r17	; 0x02
     c46:	09 83       	std	Y+1, r16	; 0x01
     c48:	97 ff       	sbrs	r25, 7
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <snprintf+0x24>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e8       	ldi	r25, 0x80	; 128
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	ae 01       	movw	r20, r28
     c58:	45 5e       	subi	r20, 0xE5	; 229
     c5a:	5f 4f       	sbci	r21, 0xFF	; 255
     c5c:	69 8d       	ldd	r22, Y+25	; 0x19
     c5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	0e 94 46 06 	call	0xc8c	; 0xc8c <vfprintf>
     c68:	4d 81       	ldd	r20, Y+5	; 0x05
     c6a:	5e 81       	ldd	r21, Y+6	; 0x06
     c6c:	57 fd       	sbrc	r21, 7
     c6e:	0a c0       	rjmp	.+20     	; 0xc84 <snprintf+0x58>
     c70:	2f 81       	ldd	r18, Y+7	; 0x07
     c72:	38 85       	ldd	r19, Y+8	; 0x08
     c74:	42 17       	cp	r20, r18
     c76:	53 07       	cpc	r21, r19
     c78:	0c f4       	brge	.+2      	; 0xc7c <snprintf+0x50>
     c7a:	9a 01       	movw	r18, r20
     c7c:	f8 01       	movw	r30, r16
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	10 82       	st	Z, r1
     c84:	2e 96       	adiw	r28, 0x0e	; 14
     c86:	e4 e0       	ldi	r30, 0x04	; 4
     c88:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__epilogue_restores__+0x1c>

00000c8c <vfprintf>:
     c8c:	ac e0       	ldi	r26, 0x0C	; 12
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ec e4       	ldi	r30, 0x4C	; 76
     c92:	f6 e0       	ldi	r31, 0x06	; 6
     c94:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__prologue_saves__>
     c98:	7c 01       	movw	r14, r24
     c9a:	6b 01       	movw	r12, r22
     c9c:	8a 01       	movw	r16, r20
     c9e:	fc 01       	movw	r30, r24
     ca0:	17 82       	std	Z+7, r1	; 0x07
     ca2:	16 82       	std	Z+6, r1	; 0x06
     ca4:	83 81       	ldd	r24, Z+3	; 0x03
     ca6:	81 ff       	sbrs	r24, 1
     ca8:	bd c1       	rjmp	.+890    	; 0x1024 <vfprintf+0x398>
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	4c 01       	movw	r8, r24
     cb0:	f7 01       	movw	r30, r14
     cb2:	93 81       	ldd	r25, Z+3	; 0x03
     cb4:	f6 01       	movw	r30, r12
     cb6:	93 fd       	sbrc	r25, 3
     cb8:	85 91       	lpm	r24, Z+
     cba:	93 ff       	sbrs	r25, 3
     cbc:	81 91       	ld	r24, Z+
     cbe:	6f 01       	movw	r12, r30
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <vfprintf+0x3a>
     cc4:	ab c1       	rjmp	.+854    	; 0x101c <vfprintf+0x390>
     cc6:	85 32       	cpi	r24, 0x25	; 37
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <vfprintf+0x4c>
     cca:	93 fd       	sbrc	r25, 3
     ccc:	85 91       	lpm	r24, Z+
     cce:	93 ff       	sbrs	r25, 3
     cd0:	81 91       	ld	r24, Z+
     cd2:	6f 01       	movw	r12, r30
     cd4:	85 32       	cpi	r24, 0x25	; 37
     cd6:	29 f4       	brne	.+10     	; 0xce2 <vfprintf+0x56>
     cd8:	b7 01       	movw	r22, r14
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     ce0:	e7 cf       	rjmp	.-50     	; 0xcb0 <vfprintf+0x24>
     ce2:	51 2c       	mov	r5, r1
     ce4:	31 2c       	mov	r3, r1
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	20 32       	cpi	r18, 0x20	; 32
     cea:	a0 f4       	brcc	.+40     	; 0xd14 <vfprintf+0x88>
     cec:	8b 32       	cpi	r24, 0x2B	; 43
     cee:	69 f0       	breq	.+26     	; 0xd0a <vfprintf+0x7e>
     cf0:	30 f4       	brcc	.+12     	; 0xcfe <vfprintf+0x72>
     cf2:	80 32       	cpi	r24, 0x20	; 32
     cf4:	59 f0       	breq	.+22     	; 0xd0c <vfprintf+0x80>
     cf6:	83 32       	cpi	r24, 0x23	; 35
     cf8:	69 f4       	brne	.+26     	; 0xd14 <vfprintf+0x88>
     cfa:	20 61       	ori	r18, 0x10	; 16
     cfc:	2c c0       	rjmp	.+88     	; 0xd56 <vfprintf+0xca>
     cfe:	8d 32       	cpi	r24, 0x2D	; 45
     d00:	39 f0       	breq	.+14     	; 0xd10 <vfprintf+0x84>
     d02:	80 33       	cpi	r24, 0x30	; 48
     d04:	39 f4       	brne	.+14     	; 0xd14 <vfprintf+0x88>
     d06:	21 60       	ori	r18, 0x01	; 1
     d08:	26 c0       	rjmp	.+76     	; 0xd56 <vfprintf+0xca>
     d0a:	22 60       	ori	r18, 0x02	; 2
     d0c:	24 60       	ori	r18, 0x04	; 4
     d0e:	23 c0       	rjmp	.+70     	; 0xd56 <vfprintf+0xca>
     d10:	28 60       	ori	r18, 0x08	; 8
     d12:	21 c0       	rjmp	.+66     	; 0xd56 <vfprintf+0xca>
     d14:	27 fd       	sbrc	r18, 7
     d16:	27 c0       	rjmp	.+78     	; 0xd66 <vfprintf+0xda>
     d18:	30 ed       	ldi	r19, 0xD0	; 208
     d1a:	38 0f       	add	r19, r24
     d1c:	3a 30       	cpi	r19, 0x0A	; 10
     d1e:	78 f4       	brcc	.+30     	; 0xd3e <vfprintf+0xb2>
     d20:	26 ff       	sbrs	r18, 6
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0xa4>
     d24:	fa e0       	ldi	r31, 0x0A	; 10
     d26:	5f 9e       	mul	r5, r31
     d28:	30 0d       	add	r19, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	53 2e       	mov	r5, r19
     d2e:	13 c0       	rjmp	.+38     	; 0xd56 <vfprintf+0xca>
     d30:	8a e0       	ldi	r24, 0x0A	; 10
     d32:	38 9e       	mul	r3, r24
     d34:	30 0d       	add	r19, r0
     d36:	11 24       	eor	r1, r1
     d38:	33 2e       	mov	r3, r19
     d3a:	20 62       	ori	r18, 0x20	; 32
     d3c:	0c c0       	rjmp	.+24     	; 0xd56 <vfprintf+0xca>
     d3e:	8e 32       	cpi	r24, 0x2E	; 46
     d40:	21 f4       	brne	.+8      	; 0xd4a <vfprintf+0xbe>
     d42:	26 fd       	sbrc	r18, 6
     d44:	6b c1       	rjmp	.+726    	; 0x101c <vfprintf+0x390>
     d46:	20 64       	ori	r18, 0x40	; 64
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <vfprintf+0xca>
     d4a:	8c 36       	cpi	r24, 0x6C	; 108
     d4c:	11 f4       	brne	.+4      	; 0xd52 <vfprintf+0xc6>
     d4e:	20 68       	ori	r18, 0x80	; 128
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0xca>
     d52:	88 36       	cpi	r24, 0x68	; 104
     d54:	41 f4       	brne	.+16     	; 0xd66 <vfprintf+0xda>
     d56:	f6 01       	movw	r30, r12
     d58:	93 fd       	sbrc	r25, 3
     d5a:	85 91       	lpm	r24, Z+
     d5c:	93 ff       	sbrs	r25, 3
     d5e:	81 91       	ld	r24, Z+
     d60:	6f 01       	movw	r12, r30
     d62:	81 11       	cpse	r24, r1
     d64:	c1 cf       	rjmp	.-126    	; 0xce8 <vfprintf+0x5c>
     d66:	98 2f       	mov	r25, r24
     d68:	9f 7d       	andi	r25, 0xDF	; 223
     d6a:	95 54       	subi	r25, 0x45	; 69
     d6c:	93 30       	cpi	r25, 0x03	; 3
     d6e:	28 f4       	brcc	.+10     	; 0xd7a <vfprintf+0xee>
     d70:	0c 5f       	subi	r16, 0xFC	; 252
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	ff e3       	ldi	r31, 0x3F	; 63
     d76:	f9 83       	std	Y+1, r31	; 0x01
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x108>
     d7a:	83 36       	cpi	r24, 0x63	; 99
     d7c:	31 f0       	breq	.+12     	; 0xd8a <vfprintf+0xfe>
     d7e:	83 37       	cpi	r24, 0x73	; 115
     d80:	71 f0       	breq	.+28     	; 0xd9e <vfprintf+0x112>
     d82:	83 35       	cpi	r24, 0x53	; 83
     d84:	09 f0       	breq	.+2      	; 0xd88 <vfprintf+0xfc>
     d86:	5b c0       	rjmp	.+182    	; 0xe3e <vfprintf+0x1b2>
     d88:	22 c0       	rjmp	.+68     	; 0xdce <vfprintf+0x142>
     d8a:	f8 01       	movw	r30, r16
     d8c:	80 81       	ld	r24, Z
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	0e 5f       	subi	r16, 0xFE	; 254
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	44 24       	eor	r4, r4
     d96:	43 94       	inc	r4
     d98:	51 2c       	mov	r5, r1
     d9a:	54 01       	movw	r10, r8
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <vfprintf+0x13c>
     d9e:	38 01       	movw	r6, r16
     da0:	f2 e0       	ldi	r31, 0x02	; 2
     da2:	6f 0e       	add	r6, r31
     da4:	71 1c       	adc	r7, r1
     da6:	f8 01       	movw	r30, r16
     da8:	a0 80       	ld	r10, Z
     daa:	b1 80       	ldd	r11, Z+1	; 0x01
     dac:	26 ff       	sbrs	r18, 6
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <vfprintf+0x12a>
     db0:	65 2d       	mov	r22, r5
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x12e>
     db6:	6f ef       	ldi	r22, 0xFF	; 255
     db8:	7f ef       	ldi	r23, 0xFF	; 255
     dba:	c5 01       	movw	r24, r10
     dbc:	2c 87       	std	Y+12, r18	; 0x0c
     dbe:	0e 94 23 08 	call	0x1046	; 0x1046 <strnlen>
     dc2:	2c 01       	movw	r4, r24
     dc4:	83 01       	movw	r16, r6
     dc6:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc8:	2f 77       	andi	r18, 0x7F	; 127
     dca:	22 2e       	mov	r2, r18
     dcc:	17 c0       	rjmp	.+46     	; 0xdfc <vfprintf+0x170>
     dce:	38 01       	movw	r6, r16
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	6f 0e       	add	r6, r31
     dd4:	71 1c       	adc	r7, r1
     dd6:	f8 01       	movw	r30, r16
     dd8:	a0 80       	ld	r10, Z
     dda:	b1 80       	ldd	r11, Z+1	; 0x01
     ddc:	26 ff       	sbrs	r18, 6
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <vfprintf+0x15a>
     de0:	65 2d       	mov	r22, r5
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <vfprintf+0x15e>
     de6:	6f ef       	ldi	r22, 0xFF	; 255
     de8:	7f ef       	ldi	r23, 0xFF	; 255
     dea:	c5 01       	movw	r24, r10
     dec:	2c 87       	std	Y+12, r18	; 0x0c
     dee:	0e 94 18 08 	call	0x1030	; 0x1030 <strnlen_P>
     df2:	2c 01       	movw	r4, r24
     df4:	2c 85       	ldd	r18, Y+12	; 0x0c
     df6:	20 68       	ori	r18, 0x80	; 128
     df8:	22 2e       	mov	r2, r18
     dfa:	83 01       	movw	r16, r6
     dfc:	23 fc       	sbrc	r2, 3
     dfe:	1b c0       	rjmp	.+54     	; 0xe36 <vfprintf+0x1aa>
     e00:	83 2d       	mov	r24, r3
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	48 16       	cp	r4, r24
     e06:	59 06       	cpc	r5, r25
     e08:	b0 f4       	brcc	.+44     	; 0xe36 <vfprintf+0x1aa>
     e0a:	b7 01       	movw	r22, r14
     e0c:	80 e2       	ldi	r24, 0x20	; 32
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     e14:	3a 94       	dec	r3
     e16:	f4 cf       	rjmp	.-24     	; 0xe00 <vfprintf+0x174>
     e18:	f5 01       	movw	r30, r10
     e1a:	27 fc       	sbrc	r2, 7
     e1c:	85 91       	lpm	r24, Z+
     e1e:	27 fe       	sbrs	r2, 7
     e20:	81 91       	ld	r24, Z+
     e22:	5f 01       	movw	r10, r30
     e24:	b7 01       	movw	r22, r14
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     e2c:	31 10       	cpse	r3, r1
     e2e:	3a 94       	dec	r3
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	4f 1a       	sub	r4, r31
     e34:	51 08       	sbc	r5, r1
     e36:	41 14       	cp	r4, r1
     e38:	51 04       	cpc	r5, r1
     e3a:	71 f7       	brne	.-36     	; 0xe18 <vfprintf+0x18c>
     e3c:	e5 c0       	rjmp	.+458    	; 0x1008 <vfprintf+0x37c>
     e3e:	84 36       	cpi	r24, 0x64	; 100
     e40:	11 f0       	breq	.+4      	; 0xe46 <vfprintf+0x1ba>
     e42:	89 36       	cpi	r24, 0x69	; 105
     e44:	39 f5       	brne	.+78     	; 0xe94 <vfprintf+0x208>
     e46:	f8 01       	movw	r30, r16
     e48:	27 ff       	sbrs	r18, 7
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <vfprintf+0x1ce>
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	0c 5f       	subi	r16, 0xFC	; 252
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <vfprintf+0x1de>
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	07 2e       	mov	r0, r23
     e60:	00 0c       	add	r0, r0
     e62:	88 0b       	sbc	r24, r24
     e64:	99 0b       	sbc	r25, r25
     e66:	0e 5f       	subi	r16, 0xFE	; 254
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	2f 76       	andi	r18, 0x6F	; 111
     e6c:	72 2e       	mov	r7, r18
     e6e:	97 ff       	sbrs	r25, 7
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <vfprintf+0x1f8>
     e72:	90 95       	com	r25
     e74:	80 95       	com	r24
     e76:	70 95       	com	r23
     e78:	61 95       	neg	r22
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	20 68       	ori	r18, 0x80	; 128
     e82:	72 2e       	mov	r7, r18
     e84:	2a e0       	ldi	r18, 0x0A	; 10
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	a4 01       	movw	r20, r8
     e8a:	0e 94 66 08 	call	0x10cc	; 0x10cc <__ultoa_invert>
     e8e:	a8 2e       	mov	r10, r24
     e90:	a8 18       	sub	r10, r8
     e92:	44 c0       	rjmp	.+136    	; 0xf1c <vfprintf+0x290>
     e94:	85 37       	cpi	r24, 0x75	; 117
     e96:	29 f4       	brne	.+10     	; 0xea2 <vfprintf+0x216>
     e98:	2f 7e       	andi	r18, 0xEF	; 239
     e9a:	b2 2e       	mov	r11, r18
     e9c:	2a e0       	ldi	r18, 0x0A	; 10
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	25 c0       	rjmp	.+74     	; 0xeec <vfprintf+0x260>
     ea2:	f2 2f       	mov	r31, r18
     ea4:	f9 7f       	andi	r31, 0xF9	; 249
     ea6:	bf 2e       	mov	r11, r31
     ea8:	8f 36       	cpi	r24, 0x6F	; 111
     eaa:	c1 f0       	breq	.+48     	; 0xedc <vfprintf+0x250>
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <vfprintf+0x228>
     eae:	88 35       	cpi	r24, 0x58	; 88
     eb0:	79 f0       	breq	.+30     	; 0xed0 <vfprintf+0x244>
     eb2:	b4 c0       	rjmp	.+360    	; 0x101c <vfprintf+0x390>
     eb4:	80 37       	cpi	r24, 0x70	; 112
     eb6:	19 f0       	breq	.+6      	; 0xebe <vfprintf+0x232>
     eb8:	88 37       	cpi	r24, 0x78	; 120
     eba:	21 f0       	breq	.+8      	; 0xec4 <vfprintf+0x238>
     ebc:	af c0       	rjmp	.+350    	; 0x101c <vfprintf+0x390>
     ebe:	2f 2f       	mov	r18, r31
     ec0:	20 61       	ori	r18, 0x10	; 16
     ec2:	b2 2e       	mov	r11, r18
     ec4:	b4 fe       	sbrs	r11, 4
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <vfprintf+0x256>
     ec8:	8b 2d       	mov	r24, r11
     eca:	84 60       	ori	r24, 0x04	; 4
     ecc:	b8 2e       	mov	r11, r24
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <vfprintf+0x256>
     ed0:	24 ff       	sbrs	r18, 4
     ed2:	0a c0       	rjmp	.+20     	; 0xee8 <vfprintf+0x25c>
     ed4:	9f 2f       	mov	r25, r31
     ed6:	96 60       	ori	r25, 0x06	; 6
     ed8:	b9 2e       	mov	r11, r25
     eda:	06 c0       	rjmp	.+12     	; 0xee8 <vfprintf+0x25c>
     edc:	28 e0       	ldi	r18, 0x08	; 8
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <vfprintf+0x260>
     ee2:	20 e1       	ldi	r18, 0x10	; 16
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x260>
     ee8:	20 e1       	ldi	r18, 0x10	; 16
     eea:	32 e0       	ldi	r19, 0x02	; 2
     eec:	f8 01       	movw	r30, r16
     eee:	b7 fe       	sbrs	r11, 7
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <vfprintf+0x274>
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	0c 5f       	subi	r16, 0xFC	; 252
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <vfprintf+0x280>
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 5f       	subi	r16, 0xFE	; 254
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	a4 01       	movw	r20, r8
     f0e:	0e 94 66 08 	call	0x10cc	; 0x10cc <__ultoa_invert>
     f12:	a8 2e       	mov	r10, r24
     f14:	a8 18       	sub	r10, r8
     f16:	fb 2d       	mov	r31, r11
     f18:	ff 77       	andi	r31, 0x7F	; 127
     f1a:	7f 2e       	mov	r7, r31
     f1c:	76 fe       	sbrs	r7, 6
     f1e:	0b c0       	rjmp	.+22     	; 0xf36 <vfprintf+0x2aa>
     f20:	37 2d       	mov	r19, r7
     f22:	3e 7f       	andi	r19, 0xFE	; 254
     f24:	a5 14       	cp	r10, r5
     f26:	50 f4       	brcc	.+20     	; 0xf3c <vfprintf+0x2b0>
     f28:	74 fe       	sbrs	r7, 4
     f2a:	0a c0       	rjmp	.+20     	; 0xf40 <vfprintf+0x2b4>
     f2c:	72 fc       	sbrc	r7, 2
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <vfprintf+0x2b4>
     f30:	37 2d       	mov	r19, r7
     f32:	3e 7e       	andi	r19, 0xEE	; 238
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <vfprintf+0x2b4>
     f36:	ba 2c       	mov	r11, r10
     f38:	37 2d       	mov	r19, r7
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <vfprintf+0x2b6>
     f3c:	ba 2c       	mov	r11, r10
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <vfprintf+0x2b6>
     f40:	b5 2c       	mov	r11, r5
     f42:	34 ff       	sbrs	r19, 4
     f44:	0d c0       	rjmp	.+26     	; 0xf60 <vfprintf+0x2d4>
     f46:	fe 01       	movw	r30, r28
     f48:	ea 0d       	add	r30, r10
     f4a:	f1 1d       	adc	r31, r1
     f4c:	80 81       	ld	r24, Z
     f4e:	80 33       	cpi	r24, 0x30	; 48
     f50:	11 f4       	brne	.+4      	; 0xf56 <vfprintf+0x2ca>
     f52:	39 7e       	andi	r19, 0xE9	; 233
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <vfprintf+0x2dc>
     f56:	32 ff       	sbrs	r19, 2
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <vfprintf+0x2da>
     f5a:	b3 94       	inc	r11
     f5c:	b3 94       	inc	r11
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <vfprintf+0x2dc>
     f60:	83 2f       	mov	r24, r19
     f62:	86 78       	andi	r24, 0x86	; 134
     f64:	09 f0       	breq	.+2      	; 0xf68 <vfprintf+0x2dc>
     f66:	b3 94       	inc	r11
     f68:	33 fd       	sbrc	r19, 3
     f6a:	13 c0       	rjmp	.+38     	; 0xf92 <vfprintf+0x306>
     f6c:	30 ff       	sbrs	r19, 0
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <vfprintf+0x2f0>
     f70:	5a 2c       	mov	r5, r10
     f72:	b3 14       	cp	r11, r3
     f74:	18 f4       	brcc	.+6      	; 0xf7c <vfprintf+0x2f0>
     f76:	53 0c       	add	r5, r3
     f78:	5b 18       	sub	r5, r11
     f7a:	b3 2c       	mov	r11, r3
     f7c:	b3 14       	cp	r11, r3
     f7e:	68 f4       	brcc	.+26     	; 0xf9a <vfprintf+0x30e>
     f80:	b7 01       	movw	r22, r14
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	3c 87       	std	Y+12, r19	; 0x0c
     f88:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     f8c:	b3 94       	inc	r11
     f8e:	3c 85       	ldd	r19, Y+12	; 0x0c
     f90:	f5 cf       	rjmp	.-22     	; 0xf7c <vfprintf+0x2f0>
     f92:	b3 14       	cp	r11, r3
     f94:	10 f4       	brcc	.+4      	; 0xf9a <vfprintf+0x30e>
     f96:	3b 18       	sub	r3, r11
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <vfprintf+0x310>
     f9a:	31 2c       	mov	r3, r1
     f9c:	34 ff       	sbrs	r19, 4
     f9e:	12 c0       	rjmp	.+36     	; 0xfc4 <vfprintf+0x338>
     fa0:	b7 01       	movw	r22, r14
     fa2:	80 e3       	ldi	r24, 0x30	; 48
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	3c 87       	std	Y+12, r19	; 0x0c
     fa8:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     fac:	3c 85       	ldd	r19, Y+12	; 0x0c
     fae:	32 ff       	sbrs	r19, 2
     fb0:	17 c0       	rjmp	.+46     	; 0xfe0 <vfprintf+0x354>
     fb2:	31 fd       	sbrc	r19, 1
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <vfprintf+0x330>
     fb6:	88 e7       	ldi	r24, 0x78	; 120
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x334>
     fbc:	88 e5       	ldi	r24, 0x58	; 88
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	b7 01       	movw	r22, r14
     fc2:	0c c0       	rjmp	.+24     	; 0xfdc <vfprintf+0x350>
     fc4:	83 2f       	mov	r24, r19
     fc6:	86 78       	andi	r24, 0x86	; 134
     fc8:	59 f0       	breq	.+22     	; 0xfe0 <vfprintf+0x354>
     fca:	31 ff       	sbrs	r19, 1
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <vfprintf+0x346>
     fce:	8b e2       	ldi	r24, 0x2B	; 43
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <vfprintf+0x348>
     fd2:	80 e2       	ldi	r24, 0x20	; 32
     fd4:	37 fd       	sbrc	r19, 7
     fd6:	8d e2       	ldi	r24, 0x2D	; 45
     fd8:	b7 01       	movw	r22, r14
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     fe0:	a5 14       	cp	r10, r5
     fe2:	38 f4       	brcc	.+14     	; 0xff2 <vfprintf+0x366>
     fe4:	b7 01       	movw	r22, r14
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
     fee:	5a 94       	dec	r5
     ff0:	f7 cf       	rjmp	.-18     	; 0xfe0 <vfprintf+0x354>
     ff2:	aa 94       	dec	r10
     ff4:	f4 01       	movw	r30, r8
     ff6:	ea 0d       	add	r30, r10
     ff8:	f1 1d       	adc	r31, r1
     ffa:	80 81       	ld	r24, Z
     ffc:	b7 01       	movw	r22, r14
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
    1004:	a1 10       	cpse	r10, r1
    1006:	f5 cf       	rjmp	.-22     	; 0xff2 <vfprintf+0x366>
    1008:	33 20       	and	r3, r3
    100a:	09 f4       	brne	.+2      	; 0x100e <vfprintf+0x382>
    100c:	51 ce       	rjmp	.-862    	; 0xcb0 <vfprintf+0x24>
    100e:	b7 01       	movw	r22, r14
    1010:	80 e2       	ldi	r24, 0x20	; 32
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 2e 08 	call	0x105c	; 0x105c <fputc>
    1018:	3a 94       	dec	r3
    101a:	f6 cf       	rjmp	.-20     	; 0x1008 <vfprintf+0x37c>
    101c:	f7 01       	movw	r30, r14
    101e:	86 81       	ldd	r24, Z+6	; 0x06
    1020:	97 81       	ldd	r25, Z+7	; 0x07
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x39c>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	2c 96       	adiw	r28, 0x0c	; 12
    102a:	e2 e1       	ldi	r30, 0x12	; 18
    102c:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__epilogue_restores__>

00001030 <strnlen_P>:
    1030:	fc 01       	movw	r30, r24
    1032:	05 90       	lpm	r0, Z+
    1034:	61 50       	subi	r22, 0x01	; 1
    1036:	70 40       	sbci	r23, 0x00	; 0
    1038:	01 10       	cpse	r0, r1
    103a:	d8 f7       	brcc	.-10     	; 0x1032 <strnlen_P+0x2>
    103c:	80 95       	com	r24
    103e:	90 95       	com	r25
    1040:	8e 0f       	add	r24, r30
    1042:	9f 1f       	adc	r25, r31
    1044:	08 95       	ret

00001046 <strnlen>:
    1046:	fc 01       	movw	r30, r24
    1048:	61 50       	subi	r22, 0x01	; 1
    104a:	70 40       	sbci	r23, 0x00	; 0
    104c:	01 90       	ld	r0, Z+
    104e:	01 10       	cpse	r0, r1
    1050:	d8 f7       	brcc	.-10     	; 0x1048 <strnlen+0x2>
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	8e 0f       	add	r24, r30
    1058:	9f 1f       	adc	r25, r31
    105a:	08 95       	ret

0000105c <fputc>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	fb 01       	movw	r30, r22
    1066:	23 81       	ldd	r18, Z+3	; 0x03
    1068:	21 fd       	sbrc	r18, 1
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <fputc+0x16>
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	28 c0       	rjmp	.+80     	; 0x10c2 <fputc+0x66>
    1072:	22 ff       	sbrs	r18, 2
    1074:	16 c0       	rjmp	.+44     	; 0x10a2 <fputc+0x46>
    1076:	46 81       	ldd	r20, Z+6	; 0x06
    1078:	57 81       	ldd	r21, Z+7	; 0x07
    107a:	24 81       	ldd	r18, Z+4	; 0x04
    107c:	35 81       	ldd	r19, Z+5	; 0x05
    107e:	42 17       	cp	r20, r18
    1080:	53 07       	cpc	r21, r19
    1082:	44 f4       	brge	.+16     	; 0x1094 <fputc+0x38>
    1084:	a0 81       	ld	r26, Z
    1086:	b1 81       	ldd	r27, Z+1	; 0x01
    1088:	9d 01       	movw	r18, r26
    108a:	2f 5f       	subi	r18, 0xFF	; 255
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	31 83       	std	Z+1, r19	; 0x01
    1090:	20 83       	st	Z, r18
    1092:	8c 93       	st	X, r24
    1094:	26 81       	ldd	r18, Z+6	; 0x06
    1096:	37 81       	ldd	r19, Z+7	; 0x07
    1098:	2f 5f       	subi	r18, 0xFF	; 255
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	37 83       	std	Z+7, r19	; 0x07
    109e:	26 83       	std	Z+6, r18	; 0x06
    10a0:	10 c0       	rjmp	.+32     	; 0x10c2 <fputc+0x66>
    10a2:	eb 01       	movw	r28, r22
    10a4:	09 2f       	mov	r16, r25
    10a6:	18 2f       	mov	r17, r24
    10a8:	00 84       	ldd	r0, Z+8	; 0x08
    10aa:	f1 85       	ldd	r31, Z+9	; 0x09
    10ac:	e0 2d       	mov	r30, r0
    10ae:	09 95       	icall
    10b0:	89 2b       	or	r24, r25
    10b2:	e1 f6       	brne	.-72     	; 0x106c <fputc+0x10>
    10b4:	8e 81       	ldd	r24, Y+6	; 0x06
    10b6:	9f 81       	ldd	r25, Y+7	; 0x07
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	9f 83       	std	Y+7, r25	; 0x07
    10bc:	8e 83       	std	Y+6, r24	; 0x06
    10be:	81 2f       	mov	r24, r17
    10c0:	90 2f       	mov	r25, r16
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	08 95       	ret

000010cc <__ultoa_invert>:
    10cc:	fa 01       	movw	r30, r20
    10ce:	aa 27       	eor	r26, r26
    10d0:	28 30       	cpi	r18, 0x08	; 8
    10d2:	51 f1       	breq	.+84     	; 0x1128 <__ultoa_invert+0x5c>
    10d4:	20 31       	cpi	r18, 0x10	; 16
    10d6:	81 f1       	breq	.+96     	; 0x1138 <__ultoa_invert+0x6c>
    10d8:	e8 94       	clt
    10da:	6f 93       	push	r22
    10dc:	6e 7f       	andi	r22, 0xFE	; 254
    10de:	6e 5f       	subi	r22, 0xFE	; 254
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	af 4f       	sbci	r26, 0xFF	; 255
    10e8:	b1 e0       	ldi	r27, 0x01	; 1
    10ea:	3e d0       	rcall	.+124    	; 0x1168 <__ultoa_invert+0x9c>
    10ec:	b4 e0       	ldi	r27, 0x04	; 4
    10ee:	3c d0       	rcall	.+120    	; 0x1168 <__ultoa_invert+0x9c>
    10f0:	67 0f       	add	r22, r23
    10f2:	78 1f       	adc	r23, r24
    10f4:	89 1f       	adc	r24, r25
    10f6:	9a 1f       	adc	r25, r26
    10f8:	a1 1d       	adc	r26, r1
    10fa:	68 0f       	add	r22, r24
    10fc:	79 1f       	adc	r23, r25
    10fe:	8a 1f       	adc	r24, r26
    1100:	91 1d       	adc	r25, r1
    1102:	a1 1d       	adc	r26, r1
    1104:	6a 0f       	add	r22, r26
    1106:	71 1d       	adc	r23, r1
    1108:	81 1d       	adc	r24, r1
    110a:	91 1d       	adc	r25, r1
    110c:	a1 1d       	adc	r26, r1
    110e:	20 d0       	rcall	.+64     	; 0x1150 <__ultoa_invert+0x84>
    1110:	09 f4       	brne	.+2      	; 0x1114 <__ultoa_invert+0x48>
    1112:	68 94       	set
    1114:	3f 91       	pop	r19
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	26 9f       	mul	r18, r22
    111a:	11 24       	eor	r1, r1
    111c:	30 19       	sub	r19, r0
    111e:	30 5d       	subi	r19, 0xD0	; 208
    1120:	31 93       	st	Z+, r19
    1122:	de f6       	brtc	.-74     	; 0x10da <__ultoa_invert+0xe>
    1124:	cf 01       	movw	r24, r30
    1126:	08 95       	ret
    1128:	46 2f       	mov	r20, r22
    112a:	47 70       	andi	r20, 0x07	; 7
    112c:	40 5d       	subi	r20, 0xD0	; 208
    112e:	41 93       	st	Z+, r20
    1130:	b3 e0       	ldi	r27, 0x03	; 3
    1132:	0f d0       	rcall	.+30     	; 0x1152 <__ultoa_invert+0x86>
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__ultoa_invert+0x5c>
    1136:	f6 cf       	rjmp	.-20     	; 0x1124 <__ultoa_invert+0x58>
    1138:	46 2f       	mov	r20, r22
    113a:	4f 70       	andi	r20, 0x0F	; 15
    113c:	40 5d       	subi	r20, 0xD0	; 208
    113e:	4a 33       	cpi	r20, 0x3A	; 58
    1140:	18 f0       	brcs	.+6      	; 0x1148 <__ultoa_invert+0x7c>
    1142:	49 5d       	subi	r20, 0xD9	; 217
    1144:	31 fd       	sbrc	r19, 1
    1146:	40 52       	subi	r20, 0x20	; 32
    1148:	41 93       	st	Z+, r20
    114a:	02 d0       	rcall	.+4      	; 0x1150 <__ultoa_invert+0x84>
    114c:	a9 f7       	brne	.-22     	; 0x1138 <__ultoa_invert+0x6c>
    114e:	ea cf       	rjmp	.-44     	; 0x1124 <__ultoa_invert+0x58>
    1150:	b4 e0       	ldi	r27, 0x04	; 4
    1152:	a6 95       	lsr	r26
    1154:	97 95       	ror	r25
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	ba 95       	dec	r27
    115e:	c9 f7       	brne	.-14     	; 0x1152 <__ultoa_invert+0x86>
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 05       	cpc	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	08 95       	ret
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	0a 2e       	mov	r0, r26
    116e:	06 94       	lsr	r0
    1170:	57 95       	ror	r21
    1172:	47 95       	ror	r20
    1174:	37 95       	ror	r19
    1176:	27 95       	ror	r18
    1178:	ba 95       	dec	r27
    117a:	c9 f7       	brne	.-14     	; 0x116e <__ultoa_invert+0xa2>
    117c:	62 0f       	add	r22, r18
    117e:	73 1f       	adc	r23, r19
    1180:	84 1f       	adc	r24, r20
    1182:	95 1f       	adc	r25, r21
    1184:	a0 1d       	adc	r26, r0
    1186:	08 95       	ret

00001188 <__prologue_saves__>:
    1188:	2f 92       	push	r2
    118a:	3f 92       	push	r3
    118c:	4f 92       	push	r4
    118e:	5f 92       	push	r5
    1190:	6f 92       	push	r6
    1192:	7f 92       	push	r7
    1194:	8f 92       	push	r8
    1196:	9f 92       	push	r9
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	ca 1b       	sub	r28, r26
    11b2:	db 0b       	sbc	r29, r27
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	09 94       	ijmp

000011c0 <__epilogue_restores__>:
    11c0:	2a 88       	ldd	r2, Y+18	; 0x12
    11c2:	39 88       	ldd	r3, Y+17	; 0x11
    11c4:	48 88       	ldd	r4, Y+16	; 0x10
    11c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    11ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    11cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    11d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    11d2:	b9 84       	ldd	r11, Y+9	; 0x09
    11d4:	c8 84       	ldd	r12, Y+8	; 0x08
    11d6:	df 80       	ldd	r13, Y+7	; 0x07
    11d8:	ee 80       	ldd	r14, Y+6	; 0x06
    11da:	fd 80       	ldd	r15, Y+5	; 0x05
    11dc:	0c 81       	ldd	r16, Y+4	; 0x04
    11de:	1b 81       	ldd	r17, Y+3	; 0x03
    11e0:	aa 81       	ldd	r26, Y+2	; 0x02
    11e2:	b9 81       	ldd	r27, Y+1	; 0x01
    11e4:	ce 0f       	add	r28, r30
    11e6:	d1 1d       	adc	r29, r1
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	ed 01       	movw	r28, r26
    11f4:	08 95       	ret

000011f6 <_exit>:
    11f6:	f8 94       	cli

000011f8 <__stop_program>:
    11f8:	ff cf       	rjmp	.-2      	; 0x11f8 <__stop_program>
